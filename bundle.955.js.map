{"version":3,"file":"bundle.955.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,mBAAmB,yCAAmC;AACtD,wBAAwB,uDAAkD;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED,YAAY;;;AAGZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;;;;;;ACrFa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;;AAG7E;AACA;AACA;;AAEA;;AAEA,SAAyB","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/csv.js","webpack://ace-playground/./node_modules/ace-code/src/mode/csv_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar escapeRegExp = require(\"../lib/lang\").escapeRegExp;\nvar CsvHighlightRules = require(\"./csv_highlight_rules\").CsvHighlightRules;\n\nvar Mode = function(options) {\n    this.HighlightRules = CsvHighlightRules;\n    if (!options) options = {};\n    var separatorRegex = [options.splitter || \",\", options.quote || '\"']\n        .map(escapeRegExp).join(\"|\");\n    this.$tokenizer = {\n        getLineTokens: function(line, state, row) {\n            return tokenizeCsv(line, state, this.options);\n        },\n        options: {\n            quotes: options.quote || '\"',\n            separatorRegex: new RegExp(\"(\" + separatorRegex + \")\"),\n            spliter: options.splitter || \",\"\n        },\n        states: {},\n    };\n    this.$highlightRules = new this.HighlightRules();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.getTokenizer = function() {\n        return this.$tokenizer;\n    };\n\n    this.$id = \"ace/mode/csv\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n\nvar classNames = [\"keyword\", \"text\", \"string\", \"string.regex\", \"variable\", \"constant.numeric\"];\n\nfunction tokenizeCsv(line, state, options) {\n    var result = [];\n    var parts = line.split(options.separatorRegex);\n    var spliter = options.spliter;\n    var quote = options.quote || '\"';\n    var stateParts = (state||\"start\").split(\"-\");\n    var column = parseInt(stateParts[1]) || 0;\n    var inString = stateParts[0] == 'string';\n    var atColumnStart = !inString;\n    for (var i = 0; i < parts.length; i++) {\n        var value = parts[i];\n        if (value) {\n            var isSeparator = false;\n            if (value == spliter && !inString) {\n                column++;\n                atColumnStart = true;\n                isSeparator = true;\n            } \n            else if (value == quote) {\n                if (atColumnStart) {\n                    inString = true;\n                    atColumnStart = false;\n                } else if (inString) {\n                    if (parts[i + 1] == '' && parts[i + 2] == quote) {\n                        value = quote + quote;\n                        i += 2;\n                    } else {\n                        inString = false;\n                    }\n                }\n            }\n            else {\n                atColumnStart = false;\n            }\n\n            result.push(\n                {\n                    value: value,\n                    type: classNames[column % classNames.length] + \".csv_\" + column + (isSeparator ? \".csv_separator\" : \"\")\n                }\n            );\n        }\n    }\n    return { tokens: result, state: inString ? \"string-\" + column : \"start\" };\n\n}","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n\nvar CsvHighlightRules = function() {\n    TextHighlightRules.call(this);\n};\n\noop.inherits(CsvHighlightRules, TextHighlightRules);\n\nexports.CsvHighlightRules = CsvHighlightRules;\n"],"names":[],"sourceRoot":""}