{"version":3,"file":"bundle.2956.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,mBAAmB,qCAA+B;AAClD,YAAY,2CAA4B;AACxC,oBAAoB,mDAA6C;;;AAGjE,eAAe,SAAgB;;AAE/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA,CAAC;;;;;;;;ACjTD;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,6BAA6B,4DAA4D;AACzF,eAAe,8CAAsC;AACrD,YAAY,2CAAyB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED,YAAY;;;;;;;;AChJZ;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;AAE7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,SAA8B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/vbscript.js","webpack://ace-playground/./node_modules/ace-code/src/mode/vbscript.js","webpack://ace-playground/./node_modules/ace-code/src/mode/vbscript_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    this.indentKeywords = {\n        \"class\": 1,\n        \"function\": 1,\n        \"sub\": 1,\n        \"if\": 1,\n        \"select\": 1,\n        \"do\": 1,\n        \"for\": 1,\n        \"while\": 1,\n        \"with\": 1,\n        \"property\": 1,\n        \"else\": 1,\n        \"elseif\": 1,\n        \"end\": -1,\n        \"loop\": -1,\n        \"next\": -1,\n        \"wend\": -1\n    };\n\n    this.foldingStartMarker = /(?:\\s|^)(class|function|sub|if|select|do|for|while|with|property|else|elseif)\\b/i;\n    this.foldingStopMarker = /\\b(end|loop|next|wend)\\b/i;\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n        if (isStart || isEnd) {\n            var match = (isEnd) ? this.foldingStopMarker.exec(line) : this.foldingStartMarker.exec(line);\n            var keyword = match && match[1].toLowerCase();\n            if (keyword) {\n                var type = session.getTokenAt(row, match.index + 2).type;\n                if (type === \"keyword.control.asp\" || type === \"storage.type.function.asp\")\n                    return this.vbsBlock(session, row, match.index + 2);\n            }\n        }\n    };\n\n\n    // must return \"\" if there's no fold, to enable caching\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n        if (isStart && !isEnd) {\n            var match = this.foldingStartMarker.exec(line);\n            var keyword = match && match[1].toLowerCase();\n            if (keyword) {\n                var type = session.getTokenAt(row, match.index + 2).type;\n                if (type == \"keyword.control.asp\" || type == \"storage.type.function.asp\") {\n                    if (keyword == \"if\" && !/then\\s*('|$)/i.test(line))\n                        return \"\";\n                    return \"start\";\n                }\n            }\n        }\n        return \"\";\n    };\n\n    this.vbsBlock = function(session, row, column, tokenRange) {\n        var stream = new TokenIterator(session, row, column);\n\n        var endOpenings = {\n            \"class\": 1,\n            \"function\": 1,\n            \"sub\": 1,\n            \"if\": 1,\n            \"select\": 1,\n            \"with\": 1,\n            \"property\": 1,\n            \"else\": 1,\n            \"elseif\": 1\n        };\n\n        var token = stream.getCurrentToken();\n        if (!token || (token.type != \"keyword.control.asp\" && token.type != \"storage.type.function.asp\"))\n            return;\n\n        var startTokenValue = token.value.toLowerCase();\n        var val = token.value.toLowerCase();\n\n        var stack = [val];\n        var dir = this.indentKeywords[val];\n\n        if (!dir)\n            return;\n\n        var firstRange = stream.getCurrentTokenRange();\n        switch (val) {\n            case \"property\":\n            case \"sub\":\n            case \"function\":\n            case \"if\":\n            case \"select\":\n            case \"do\":\n            case \"for\":\n            case \"class\":\n            case \"while\":\n            case \"with\":\n                var line = session.getLine(row);\n                var singleLineCondition = /^\\s*If\\s+.*\\s+Then(?!')\\s+(?!')\\S/i.test(line);\n                if (singleLineCondition)\n                    return;\n                var checkToken = new RegExp(\"(?:^|\\\\s)\" + val, \"i\");\n                var endTest = /^\\s*End\\s(If|Sub|Select|Function|Class|With|Property)\\s*/i.test(line);\n                if (!checkToken.test(line) && !endTest) {\n                    return;\n                }\n                if (endTest) {\n                    var tokenRange = stream.getCurrentTokenRange();\n                    stream.step = stream.stepBackward;\n                    stream.step();\n                    stream.step();\n                    token = stream.getCurrentToken();\n                    if (token) {\n                        val = token.value.toLowerCase();\n                        if (val == \"end\") {\n                            firstRange = stream.getCurrentTokenRange();\n                            firstRange = new Range(firstRange.start.row, firstRange.start.column, tokenRange.start.row, tokenRange.end.column);\n                        }\n                    }\n                    dir = -1;\n                }\n                break;\n            case \"end\":\n                var tokenPos = stream.getCurrentTokenPosition();\n                firstRange = stream.getCurrentTokenRange();\n                stream.step = stream.stepForward;\n                stream.step();\n                stream.step();\n                token = stream.getCurrentToken();\n                if (token) {\n                    val = token.value.toLowerCase();\n                    if (val in endOpenings) {\n                        startTokenValue = val;\n                        var nextTokenPos = stream.getCurrentTokenPosition();\n                        var endColumn = nextTokenPos.column + val.length;\n                        firstRange = new Range(tokenPos.row, tokenPos.column, nextTokenPos.row, endColumn);\n                    }\n                }\n                stream.step = stream.stepBackward;\n                stream.step();\n                stream.step();\n                break;\n        }\n        var startColumn = dir === -1 ? session.getLine(row - 1).length : session.getLine(row).length;\n        var startRow = row;\n        var ranges = [];\n        ranges.push(firstRange);\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            var outputRange = null;\n            var ignore = false;\n            if (token.type != \"keyword.control.asp\" && token.type != \"storage.type.function.asp\")\n                continue;\n            val = token.value.toLowerCase();\n            var level = dir * this.indentKeywords[val];\n\n            switch (val) {\n                case \"property\":\n                case \"sub\":\n                case \"function\":\n                case \"if\":\n                case \"select\":\n                case \"do\":\n                case \"for\":\n                case \"class\":\n                case \"while\":\n                case \"with\":\n                    var line = session.getLine(stream.getCurrentTokenRow());\n                    var singleLineCondition = /^\\s*If\\s+.*\\s+Then(?!')\\s+(?!')\\S/i.test(line);\n                    if (singleLineCondition) {\n                        level = 0;\n                        ignore = true;\n                    }\n                    var checkToken = new RegExp(\"^\\\\s* end\\\\s+\" + val, \"i\");\n                    if (checkToken.test(line)) {\n                        level = 0;\n                        ignore = true;\n                    }\n                    break;\n                case \"elseif\":\n                case \"else\":\n                    level = 0;\n                    if (startTokenValue != \"elseif\") {\n                        ignore = true;\n                    }\n                    break;\n            }\n\n            if (level > 0) {\n                stack.unshift(val);\n            } else if (level <= 0 && ignore === false) {\n                stack.shift();\n                if (!stack.length) {\n                        switch (val) {\n                            case \"end\":\n                                var tokenPos = stream.getCurrentTokenPosition();\n                                outputRange = stream.getCurrentTokenRange();\n                                stream.step();\n                                stream.step();\n                                token = stream.getCurrentToken();\n                                if (token) {\n                                    val = token.value.toLowerCase();\n                                    if (val in endOpenings) {\n                                        if ((startTokenValue == \"else\" || startTokenValue == \"elseif\")) {\n                                            if (val !== \"if\") {\n                                                ranges.shift();\n                                            }\n                                        } else {\n                                            if (val != startTokenValue)\n                                                ranges.shift();\n                                        }\n                                        var nextTokenPos = stream.getCurrentTokenPosition();\n                                        var endColumn = nextTokenPos.column + val.length;\n                                        outputRange = new Range(tokenPos.row, tokenPos.column, nextTokenPos.row, endColumn);\n                                    } else {\n                                        ranges.shift();\n                                    }\n                                } else {\n                                    ranges.shift();\n                                }\n                                stream.step = stream.stepBackward;\n                                stream.step();\n                                stream.step();\n                                token = stream.getCurrentToken();\n                                val = token.value.toLowerCase();\n                                break;\n                            case \"select\":\n                            case \"sub\":\n                            case \"if\":\n                            case \"function\":\n                            case \"class\":\n                            case \"with\":\n                            case \"property\":\n                                if (val != startTokenValue)\n                                    ranges.shift();\n                                break;\n                            case \"do\":\n                                if (startTokenValue != \"loop\")\n                                    ranges.shift();\n                                break;\n                            case \"loop\":\n                                if (startTokenValue != \"do\")\n                                    ranges.shift();\n                                break;\n                            case \"for\":\n                                if (startTokenValue != \"next\")\n                                    ranges.shift();\n                                break;\n                            case \"next\":\n                                if (startTokenValue != \"for\")\n                                    ranges.shift();\n                                break;\n                            case \"while\":\n                                if (startTokenValue != \"wend\")\n                                    ranges.shift();\n                                break;\n                            case \"wend\":\n                                if (startTokenValue != \"while\")\n                                    ranges.shift();\n                                break;\n                        }\n                        break;\n                }\n\n                if (level === 0){\n                    stack.unshift(val);\n                }\n            }\n        }\n\n        if (!token)\n            return null;\n\n        if (tokenRange) {\n            if (!outputRange) {\n                ranges.push(stream.getCurrentTokenRange());\n            } else {\n                ranges.push(outputRange);\n            }\n            return ranges;\n        }\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1) {\n            var endColumn = session.getLine(row).length;\n            return new Range(row, endColumn, startRow - 1, startColumn);\n        } else\n            return new Range(startRow, startColumn, row - 1, session.getLine(row - 1).length);\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar VBScriptHighlightRules = require(\"./vbscript_highlight_rules\").VBScriptHighlightRules;\nvar FoldMode = require(\"./folding/vbscript\").FoldMode;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = VBScriptHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n    this.indentKeywords = this.foldingRules.indentKeywords;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = [\"'\", \"REM\"];\n\n    var outdentKeywords = [\n        \"else\",\n        \"elseif\",\n        \"end\",\n        \"loop\",\n        \"next\",\n        \"wend\"\n    ];\n\n    function getNetIndentLevel(tokens, line, indentKeywords) {\n        var level = 0;\n        // Support single-line blocks by decrementing the indent level if\n        // an ending token is found\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (token.type == \"keyword.control.asp\" || token.type == \"storage.type.function.asp\") {\n                var val = token.value.toLowerCase();\n                if (val in indentKeywords) {\n                    switch (val) {\n                        case \"property\":\n                        case \"sub\":\n                        case \"function\":\n                        case \"select\":\n                        case \"do\":\n                        case \"for\":\n                        case \"class\":\n                        case \"while\":\n                        case \"with\":\n                        case \"if\":\n                            var checkToken = new RegExp(\"^\\\\s* end\\\\s+\" + val, \"i\");\n                            var singleLineCondition = /^\\s*If\\s+.*\\s+Then(?!')\\s+(?!')\\S/i.test(line);\n                            if (!singleLineCondition && !checkToken.test(line))\n                                level += indentKeywords[val];\n                            break;\n                        default:\n                            level += indentKeywords[val];\n                            break;\n                    }\n                }\n            }\n        }\n        // Limit the level to +/- 1 since usually users only indent one level\n        // at a time regardless of the logical nesting level\n        if (level < 0) {\n            return -1;\n        } else if (level > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        var level = 0;\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (state == \"start\") {\n            level = getNetIndentLevel(tokens, line, this.indentKeywords);\n        }\n        if (level > 0) {\n            return indent + tab;\n        } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {\n            // Don't do a next-line outdent if we're going to do a real outdent of this line\n            if (!this.checkOutdent(state, line, \"\\n\")) {\n                return indent.substr(0, indent.length - tab.length);\n            }\n        }\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (input != \"\\n\" && input != \"\\r\" && input != \"\\r\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n\n        if (!tokens || !tokens.length)\n            return false;\n        var val = tokens[0].value.toLowerCase();\n        return ((tokens[0].type == \"keyword.control.asp\" || tokens[0].type == \"storage.type.function.asp\") && outdentKeywords.indexOf(val) != -1);\n    };\n\n    this.getMatching = function(session, row, column, tokenRange) {\n        if (row == undefined) {\n            var pos = session.selection.lead;\n            column = pos.column;\n            row = pos.row;\n        }\n        if (tokenRange == undefined)\n            tokenRange = true;\n\n        var startToken = session.getTokenAt(row, column);\n        if (startToken) {\n            var val = startToken.value.toLowerCase();\n            if (val in this.indentKeywords)\n                return this.foldingRules.vbsBlock(session, row, column, tokenRange);\n        }\n    };\n\n    this.autoOutdent = function(state, session, row) {\n        var line = session.getLine(row);\n        var column = line.match(/^\\s*/)[0].length;\n        if (!column || !row) return;\n\n        var startRange = this.getMatching(session, row, column + 1, false);\n        if (!startRange || startRange.start.row == row)\n            return;\n        var indent = this.$getIndent(session.getLine(startRange.start.row));\n        if (indent.length != column) {\n            session.replace(new Range(row, 0, row, column), indent);\n            session.outdentRows(new Range(row + 1, 0, row + 1, 0));\n        }\n    };\n\n    this.$id = \"ace/mode/vbscript\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode_highlight_rules.tmpl.js (UUID: 7F9C9343-D48E-4E7D-BFE8-F680714DCD3E) */\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar VBScriptHighlightRules = function() {\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.control.asp\":  \"If|Then|Else|ElseIf|End|While|Wend|For|To|Each|Case|Select|Return\"\n            + \"|Continue|Do|Until|Loop|Next|With|Exit|Function|Property|Type|Enum|Sub|IIf|Class\",\n        \"storage.type.asp\": \"Dim|Call|Const|Redim|Set|Let|Get|New|Randomize|Option|Explicit|Preserve|Erase|Execute|ExecuteGlobal\",\n        \"storage.modifier.asp\": \"Private|Public|Default\",\n        \"keyword.operator.asp\": \"Mod|And|Not|Or|Xor|As|Eqv|Imp|Is\",\n        \"constant.language.asp\": \"Empty|False|Nothing|Null|True\",\n        \"variable.language.vb.asp\": \"Me\",\n        \"support.class.vb.asp\": \"RegExp\",\n        \"support.class.asp\": \"Application|ObjectContext|Request|Response|Server|Session\",\n        \"support.class.collection.asp\": \"Contents|StaticObjects|ClientCertificate|Cookies|Form|QueryString|ServerVariables\",\n        \"support.constant.asp\": \"TotalBytes|Buffer|CacheControl|Charset|ContentType|Expires|ExpiresAbsolute\"\n            + \"|IsClientConnected|PICS|Status|ScriptTimeout|CodePage|LCID|SessionID|Timeout\",\n        \"support.function.asp\": \"Lock|Unlock|SetAbort|SetComplete|BinaryRead|AddHeader|AppendToLog\"\n            + \"|BinaryWrite|Clear|Flush|Redirect|Write|CreateObject|HTMLEncode|MapPath|URLEncode|Abandon|Convert|Regex\",\n        \"support.function.event.asp\": \"Application_OnEnd|Application_OnStart\"\n            + \"|OnTransactionAbort|OnTransactionCommit|Session_OnEnd|Session_OnStart\",\n        \"support.function.vb.asp\": \"Array|Add|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng\"\n            + \"|Conversions|Cos|CreateObject|CSng|CStr|Date|DateAdd|DateDiff|DatePart|DateSerial\"\n            + \"|DateValue|Day|Derived|Math|Escape|Eval|Exists|Exp|Filter|FormatCurrency\"\n            + \"|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex\"\n            + \"|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric\"\n            + \"|IsObject|Item|Items|Join|Keys|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim\"\n            + \"|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Remove|RemoveAll|Replace\"\n            + \"|RGB|Right|Rnd|Round|ScriptEngine|ScriptEngineBuildVersion|ScriptEngineMajorVersion\"\n            + \"|ScriptEngineMinorVersion|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse\"\n            + \"|Tan|Time|Timer|TimeSerial|TimeValue|TypeName|UBound|UCase|Unescape|VarType|Weekday|WeekdayName|Year\"\n            + \"|AscB|AscW|ChrB|ChrW|InStrB|LeftB|LenB|MidB|RightB|Abs|GetUILanguage\",\n        \"support.type.vb.asp\": \"vbTrue|vbFalse|vbCr|vbCrLf|vbFormFeed|vbLf|vbNewLine|vbNullChar|vbNullString\"\n            + \"|vbTab|vbVerticalTab|vbBinaryCompare|vbTextCompare|vbSunday|vbMonday|vbTuesday|vbWednesday\"\n            + \"|vbThursday|vbFriday|vbSaturday|vbUseSystemDayOfWeek|vbFirstJan1|vbFirstFourDays|vbFirstFullWeek\"\n            + \"|vbGeneralDate|vbLongDate|vbShortDate|vbLongTime|vbShortTime|vbObjectError|vbEmpty|vbNull|vbInteger\"\n            + \"|vbLong|vbSingle|vbDouble|vbCurrency|vbDate|vbString|vbObject|vbError|vbBoolean|vbVariant\"\n            + \"|vbDataObject|vbDecimal|vbByte|vbArray|vbOKOnly|vbOKCancel|vbAbortRetryIgnore|vbYesNoCancel|vbYesNo\"\n            + \"|vbRetryCancel|vbCritical|vbQuestion|vbExclamation|vbInformation|vbDefaultButton1|vbDefaultButton2\"\n            + \"|vbDefaultButton3|vbDefaultButton4|vbApplicationModal|vbSystemModal|vbOK|vbCancel|vbAbort|vbRetry|vbIgnore|vbYes|vbNo\"\n            + \"|vbUseDefault\"\n    }, \"identifier\", true);\n\n    this.$rules = {\n    \"start\": [\n        {\n            token: [\n                \"meta.ending-space\"\n            ],\n            regex: \"$\"\n        },\n        {\n            token: [null],\n            regex: \"^(?=\\\\t)\",\n            next: \"state_3\"\n        },\n        {\n            token: [null],\n            regex: \"^(?= )\",\n            next: \"state_4\"\n        },\n        {\n            token: [\n                \"text\",\n                \"storage.type.function.asp\",\n                \"text\",\n                \"entity.name.function.asp\",\n                \"text\",\n                \"punctuation.definition.parameters.asp\",\n                \"variable.parameter.function.asp\",\n                \"punctuation.definition.parameters.asp\"\n            ],\n            regex: \"^(\\\\s*)(Function|Sub)(\\\\s+)([a-zA-Z_]\\\\w*)(\\\\s*)(\\\\()([^)]*)(\\\\))\"\n        },\n        {\n            token: \"punctuation.definition.comment.asp\",\n            regex: \"'|REM(?=\\\\s|$)\",\n            next: \"comment\",\n            caseInsensitive: true\n        },\n        {\n            token: \"storage.type.asp\",\n            regex: \"On\\\\s+Error\\\\s+(?:Resume\\\\s+Next|GoTo)\\\\b\",\n            caseInsensitive: true\n        },\n        {\n            token: \"punctuation.definition.string.begin.asp\",\n            regex: '\"',\n            next: \"string\"\n        },\n        {\n            token: [\n                \"punctuation.definition.variable.asp\"\n            ],\n            regex: \"(\\\\$)[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\\\b\\\\s*\"\n        },\n//        {\n//            token: [\n//                \"support.type.vb.asp\"\n//            ],\n//            regex: \"(?:(?<=as )(\\\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\\\b))\", // ERROR: This contains a lookbehind, which JS does not support :(\"\n//        },\n        {\n            token: \"constant.numeric.asp\",\n            regex: \"-?\\\\b(?:(?:0(?:x|X)[0-9a-fA-F]*)|(?:(?:[0-9]+\\\\.?[0-9]*)|(?:\\\\.[0-9]+))(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f)?\\\\b\"\n        },\n        {\n            regex: \"\\\\w+\",\n            token: keywordMapper\n        },\n        {\n            token: [\"entity.name.function.asp\"],\n            regex: \"(?:(\\\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\\\b)(?=\\\\(\\\\)?))\"\n        },\n//        {\n//            token: [\n//                \"variable.other.asp\"\n//            ],\n//            regex: \"(?:((?<=(\\\\+|=|-|\\\\&|\\\\\\\\|/|<|>|\\\\(|,))\\\\s*\\\\b([a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?)\\\\b(?!(\\\\(|\\\\.))|\\\\b([a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?)\\\\b(?=\\\\s*(\\\\+|=|-|\\\\&|\\\\\\\\|/|<|>|\\\\(|\\\\)))))\", // ERROR: This contains a lookbehind, which JS does not support :(\"\n//        },\n        {\n            token: [\"keyword.operator.asp\"],\n            regex: \"\\\\-|\\\\+|\\\\*|\\\\/|\\\\>|\\\\<|\\\\=|\\\\&|\\\\\\\\|\\\\^\"\n        }\n    ],\n    \"state_3\": [\n        {\n            token: [\n                \"meta.odd-tab.tabs\",\n                \"meta.even-tab.tabs\"\n            ],\n            regex: \"(\\\\t)(\\\\t)?\"\n        },\n        {\n            token: \"meta.leading-space\",\n            regex: \"(?=[^\\\\t])\",\n            next: \"start\"\n        },\n        {\n            token: \"meta.leading-space\",\n            regex: \".\",\n            next: \"state_3\"\n        }\n    ],\n    \"state_4\": [\n        {\n            token: [\"meta.odd-tab.spaces\", \"meta.even-tab.spaces\"],\n            regex: \"(  )(  )?\"\n        },\n        {\n            token: \"meta.leading-space\",\n            regex: \"(?=[^ ])\",\n            next: \"start\"\n        },\n        {\n            defaultToken: \"meta.leading-space\"\n        }\n    ],\n    \"comment\": [\n        {\n            token: \"comment.line.apostrophe.asp\",\n            regex: \"$\",\n            next: \"start\"\n        },\n        {\n            defaultToken: \"comment.line.apostrophe.asp\"\n        }\n    ],\n    \"string\": [\n        {\n            token: \"constant.character.escape.apostrophe.asp\",\n            regex: '\"\"'\n        },\n        {\n            token: \"string.quoted.double.asp\",\n            regex: '\"',\n            next: \"start\"\n        },\n        {\n            defaultToken: \"string.quoted.double.asp\"\n        }\n    ]\n};\n\n};\n\noop.inherits(VBScriptHighlightRules, TextHighlightRules);\n\nexports.VBScriptHighlightRules = VBScriptHighlightRules;\n"],"names":[],"sourceRoot":""}