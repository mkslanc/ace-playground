{"version":3,"file":"bundle.2613.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,YAAY,2CAA4B;AACxC,mBAAmB,qCAA+B;;AAElD,eAAe,SAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,UAAU;AAC7C,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AC9JD;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,qBAAqB,uDAAkD;AACvE,2BAA2B,iDAAwD;AACnF,qBAAqB,8CAAoC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED,YAAY;;;;;;;;ACpDZ;AACA;AACA;;AAEA,IAAiB;;AAEjB,cAAc,mBAAO,CAAC,IAAY;AAClC,6BAA6B,wDAAoD;;;AAGjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG,aAAa,GAAG;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG,iBAAiB,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,2BAA2B,EAAE,KAAK,EAAE;AACtH,aAAa;AACb;AACA;AACA,4BAA4B,EAAE,KAAK,EAAE,KAAK,EAAE;AAC5C,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA,IAAI,SAAyB;;;;;;;;ACvShB;;AAEb,YAAY,2CAAyB;;AAErC;;AAEA;;AAEA;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA,uCAAuC;;AAEvC;;AAEA;AACA,oDAAoD,yBAAyB;;AAE7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;;AAED,4BAA4B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://ace-playground/./node_modules/ace-code/src/mode/ion.js","webpack://ace-playground/./node_modules/ace-code/src/mode/ion_highlight_rules.js","webpack://ace-playground/./node_modules/ace-code/src/mode/matching_brace_outdent.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode.js'\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./ion_highlight_rules\").IonHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function () {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n        start: \"/*\",\n        end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/ion\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode_highlight_rules.js'\n*/\n\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n\n    var IonHighlightRules = function() {\n        // constant.language.bool.ion\n        var k_keywords_bool =\n            \"TRUE|FALSE\";\n        var k_bool = k_keywords_bool;\n\n        // constant.language.null.ion\n        var k_keywords_null =\n            \"NULL.NULL|NULL.BOOL|NULL.INT|NULL.FLOAT|NULL.DECIMAL|NULL.TIMESTAMP|NULL.STRING|NULL.SYMBOL|NULL.BLOB|NULL.CLOB|\"\n            +\"NULL.STRUCT|NULL.LIST|NULL.SEXP|NULL\";\n        var k_null = k_keywords_null;\n\n\n        var keywordMapper = this.createKeywordMapper({\n            \"constant.language.bool.ion\": k_bool,\n            \"constant.language.null.ion\": k_null\n        }, \"constant.other.symbol.identifier.ion\", true);\n\n        var keywordMapperRule = {\n            token : keywordMapper,\n            regex : \"\\\\b\\\\w+(?:\\\\.\\\\w+)?\\\\b\"\n        };\n\n        this.$rules = {\n          \"start\": [\n            {\n              \"include\": \"value\"\n            }\n          ],\n          \"value\": [\n            {\n              \"include\": \"whitespace\"\n            },\n            {\n              \"include\": \"comment\"\n            },\n            {\n              \"include\": \"annotation\"\n            },\n            {\n              \"include\": \"string\"\n            },\n            {\n              \"include\": \"number\"\n            },\n            {\n              \"include\": \"keywords\"\n            },\n            {\n              \"include\": \"symbol\"\n            },\n            {\n              \"include\": \"clob\"\n            },\n            {\n              \"include\": \"blob\"\n            },\n            {\n              \"include\": \"struct\"\n            },\n            {\n              \"include\": \"list\"\n            },\n            {\n              \"include\": \"sexp\"\n            }\n          ],\n          \"sexp\": [\n            {\n              \"token\": \"punctuation.definition.sexp.begin.ion\",\n              \"regex\": \"\\\\(\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.sexp.end.ion\",\n                  \"regex\": \"\\\\)\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"storage.type.symbol.operator.ion\",\n                  \"regex\": \"[\\\\!\\\\#\\\\%\\\\&\\\\*\\\\+\\\\-\\\\./\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\^\\\\`\\\\|\\\\~]+\"\n                }\n              ]\n            }\n          ],\n          \"comment\": [\n            {\n              \"token\": \"comment.line.ion\",\n              \"regex\": \"//[^\\\\n]*\"\n            },\n            {\n              \"token\": \"comment.block.ion\",\n              \"regex\": \"/\\\\*\",\n              \"push\": [\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[*]/\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[^*/]+\"\n                },\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[*/]+\"\n                }\n              ]\n            }\n          ],\n          \"list\": [\n            {\n              \"token\": \"punctuation.definition.list.begin.ion\",\n              \"regex\": \"\\\\[\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.list.end.ion\",\n                  \"regex\": \"\\\\]\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"punctuation.definition.list.separator.ion\",\n                  \"regex\": \",\"\n                }\n              ]\n            }\n          ],\n          \"struct\": [\n            {\n              \"token\": \"punctuation.definition.struct.begin.ion\",\n              \"regex\": \"\\\\{\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.struct.end.ion\",\n                  \"regex\": \"\\\\}\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"punctuation.definition.struct.separator.ion\",\n                  \"regex\": \",|:\"\n                }\n              ]\n            }\n          ],\n          \"blob\": [\n            {\n              \"token\": [\n                \"punctuation.definition.blob.begin.ion\",\n                \"string.other.blob.ion\",\n                \"punctuation.definition.blob.end.ion\"\n              ],\n              \"regex\": \"(\\\\{\\\\{)([^\\\"]*)(\\\\}\\\\})\"\n            }\n          ],\n          \"clob\": [\n            {\n              \"token\": [\n                \"punctuation.definition.clob.begin.ion\",\n                \"string.other.clob.ion\",\n                \"punctuation.definition.clob.end.ion\"\n              ],\n              \"regex\": \"(\\\\{\\\\{)(\\\"[^\\\"]*\\\")(\\\\}\\\\})\"\n            }\n          ],\n          \"symbol\": [\n            {\n              \"token\": \"storage.type.symbol.quoted.ion\",\n              \"regex\": \"(['])((?:(?:\\\\\\\\')|(?:[^']))*?)(['])\"\n            },\n            {\n              \"token\": \"storage.type.symbol.identifier.ion\",\n              \"regex\": \"[\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*\"\n            }\n          ],\n          \"number\": [\n            {\n              \"token\": \"constant.numeric.timestamp.ion\",\n              \"regex\": \"\\\\d{4}(?:-\\\\d{2})?(?:-\\\\d{2})?T(?:\\\\d{2}:\\\\d{2})(?::\\\\d{2})?(?:\\\\.\\\\d+)?(?:Z|[-+]\\\\d{2}:\\\\d{2})?\"\n            },\n            {\n              \"token\": \"constant.numeric.timestamp.ion\",\n              \"regex\": \"\\\\d{4}-\\\\d{2}-\\\\d{2}T?\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.binary.ion\",\n              \"regex\": \"-?0[bB][01](?:_?[01])*\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.hex.ion\",\n              \"regex\": \"-?0[xX][0-9a-fA-F](?:_?[0-9a-fA-F])*\"\n            },\n            {\n              \"token\": \"constant.numeric.float.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)?(?:[eE][+-]?\\\\d+)\"\n            },\n            {\n              \"token\": \"constant.numeric.float.ion\",\n              \"regex\": \"(?:[-+]inf)|(?:nan)\"\n            },\n            {\n              \"token\": \"constant.numeric.decimal.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:(?:(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)(?:[dD][+-]?\\\\d+)|\\\\.(?:\\\\d(?:_?\\\\d)*)?)|(?:[dD][+-]?\\\\d+))\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)\"\n            }\n          ],\n          \"string\": [\n            {\n              \"token\": [\n                \"punctuation.definition.string.begin.ion\",\n                \"string.quoted.double.ion\",\n                \"punctuation.definition.string.end.ion\"\n              ],\n              \"regex\": \"([\\\"])((?:(?:\\\\\\\\\\\")|(?:[^\\\"]))*?)([\\\"])\"\n            },\n            {\n              \"token\": \"punctuation.definition.string.begin.ion\",\n              \"regex\": \"'{3}\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.string.end.ion\",\n                  \"regex\": \"'{3}\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"token\": \"string.quoted.triple.ion\",\n                  \"regex\": \"(?:\\\\\\\\'|[^'])+\"\n                },\n                {\n                  \"token\": \"string.quoted.triple.ion\",\n                  \"regex\": \"'\"\n                }\n              ]\n            }\n          ],\n          \"annotation\": [\n            {\n              \"token\": [\n                \"variable.language.annotation.ion\",\n                \"punctuation.definition.annotation.ion\"\n              ],\n              \"regex\": /('(?:[^'\\\\]|\\\\.)*')\\s*(::)/\n            },\n            {\n              \"token\": [\n                \"variable.language.annotation.ion\",\n                \"punctuation.definition.annotation.ion\"\n              ],\n              \"regex\": \"([\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*)\\\\s*(::)\"\n            }\n          ],\n          \"whitespace\": [\n            {\n              \"token\": \"text.ion\",\n              \"regex\": \"\\\\s+\"\n            }\n          ]\n        } ;\n        this.$rules[\"keywords\"] = [keywordMapperRule];\n\n\n        this.normalizeRules();\n    };\n\n    oop.inherits(IonHighlightRules, TextHighlightRules);\n\n    exports.IonHighlightRules = IonHighlightRules;\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n"],"names":[],"sourceRoot":""}