{"version":3,"file":"bundle.3629.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,0BAA0B,yDAAsD;AAChF,2BAA2B,iDAAwD;;AAEnF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,SAAS,YAAY;;AAE9C;AACA;;AAEA;AACA,yCAAyC,wKAAwK;AACjN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAsB;AACtB;;AAEA;AACA;;AAEA;AACA,CAAC;;AAED,YAAY;;;;;;;;ACxCC;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,+CAAoD;AAC7E,yBAAyB,wDAAoD;;AAE7E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,qCAAqC;AACrC;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAoE;AACzF,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,qBAAqB,oEAAoE;AACzF,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yDAAyD,IAAI,cAAc,IAAI;AAC/E,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,iCAAiC,KAAK,IAAI;AAC1C,iBAAiB;AACjB,iBAAiB,gDAAgD;AACjE,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,sDAAsD;AACvE,iBAAiB,gDAAgD;AACjE,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,yBAAyB;AACzB,SAAS;AACT;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,SAA2B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/latte.js","webpack://ace-playground/./node_modules/ace-code/src/mode/latte_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlMode = require(\"./html\").Mode;\nvar LatteHighlightRules = require(\"./latte_highlight_rules\").LatteHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function() {\n    HtmlMode.call(this);\n    this.HighlightRules = LatteHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n};\noop.inherits(Mode, HtmlMode);\n\n(function() {\n    this.blockComment = {start: \"{*\", end: \"*}\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*\\{(?:if|else|elseif|ifset|elseifset|ifchanged|switch|case|foreach|iterateWhile|for|while|first|last|sep|try|capture|spaceless|snippet|block|define|embed|snippetArea)\\b[^{]*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return /^\\s+\\{\\/$/.test(line + input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n    };\n\n    this.$id = \"ace/mode/latte\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatteHighlightRules = function() {\n    // inherit from html\n    HtmlHighlightRules.call(this);\n\n    // add latte start tags to the HTML\n    for (var rule in this.$rules) {\n        this.$rules[rule].unshift(\n            {\n                token : \"comment.start.latte\",\n                regex : \"\\\\{\\\\*\",\n                push : [{\n                    token : \"comment.end.latte\",\n                    regex : \".*\\\\*\\\\}\",\n                    next : \"pop\"\n                }, {\n                    defaultToken : \"comment\"\n                }]\n            }, {\n                token : \"meta.tag.punctuation.tag-open.latte\",\n                regex : \"\\\\{(?![\\\\s'\\\"{}]|$)/?\",\n                push : [{\n                    token : \"meta.tag.latte\",\n                    regex : \"(?:_|=|[a-z]\\\\w*(?:[.:-]\\\\w+)*)?\",\n                    next: [{\n                        token : \"meta.tag.punctuation.tag-close.latte\",\n                        regex : \"\\\\}\",\n                        next : \"pop\"\n                    }, {\n                        include: \"latte-content\"\n                    }]\n                }]\n        });\n    }\n\n    // add n:attribute to HTML tag\n    this.$rules['tag_stuff'].unshift({\n        token : \"meta.attribute.latte\",\n        regex : \"n:[\\\\w-]+\",\n        next : [{\n            include: \"tag_whitespace\"\n        }, {\n            token : \"keyword.operator.attribute-equals.xml\",\n            regex : \"=\",\n            next : [{\n                token : \"string.attribute-value.xml\",\n                regex : \"'\",\n                next : [\n                    {token : \"string.attribute-value.xml\", regex: \"'\", next: \"tag_stuff\"},\n                    {include : \"latte-content\"}\n                ]\n            }, {\n                token : \"string.attribute-value.xml\",\n                regex : '\"',\n                next : [\n                    {token : \"string.attribute-value.xml\", regex: '\"', next: \"tag_stuff\"},\n                    {include : \"latte-content\"}\n                ]\n            }, {\n                token : \"text.tag-whitespace.xml\",\n                regex : \"\\\\s\",\n                next: \"tag_stuff\"\n            }, {\n                token : \"meta.tag.punctuation.tag-close.xml\",\n                regex : \"/?>\",\n                next: \"tag_stuff\"\n            }, {\n               include : \"latte-content\"\n            }]\n        }, {\n            token : \"empty\",\n            regex : \"\",\n            next : \"tag_stuff\"\n        }]\n    });\n\n\n    // PHP content\n    this.$rules[\"latte-content\"] = [\n        {\n            token : \"comment.start.latte\", // multi line comment\n            regex : \"\\\\/\\\\*\",\n            push : [\n                {\n                    token : \"comment.end.latte\",\n                    regex : \"\\\\*\\\\/\",\n                    next : \"pop\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ]\n        }, {\n            token : \"string.start\", // \" string start\n            regex : '\"',\n            push : [\n                {\n                    token : \"constant.language.escape\",\n                    regex : '\\\\\\\\(?:[nrtvef\\\\\\\\\"$]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2})'\n                }, {\n                    token : \"variable\",\n                    regex : /\\$[\\w]+(?:\\[[\\w\\]+]|[=\\-]>\\w+)?/\n                }, {\n                    token : \"variable\",\n                    regex : /\\$\\{[^\"\\}]+\\}?/           // this is wrong but ok for now\n                },\n                {token : \"string.end\", regex : '\"', next : \"pop\"},\n                {defaultToken : \"string\"}\n            ]\n        }, {\n            token : \"string.start\", // ' string start\n            regex : \"'\",\n            push : [\n                {token : \"constant.language.escape\", regex : /\\\\['\\\\]/},\n                {token : \"string.end\", regex : \"'\", next : \"pop\"},\n                {defaultToken : \"string\"}\n            ]\n        }, {\n            token : \"keyword.control\",\n            regex : \"\\\\b(?:INF|NAN|and|or|xor|AND|OR|XOR|clone|new|instanceof|return|continue|break|as)\\\\b\"\n        }, {\n            token : \"constant.language\",\n            regex : \"\\\\b(?:true|false|null|TRUE|FALSE|NULL)\\\\b\"\n        }, {\n            token : \"variable\",\n            regex : /\\$\\w+/\n        }, {\n            token : \"constant.numeric\",\n            regex : \"[+-]?[0-9]+(?:\\\\.[0-9]+)?(?:e[0-9]+)?\"\n        }, {\n            token : [\"support.class\", \"keyword.operator\"],\n            regex : \"\\\\b(\\\\w+)(::)\"\n        }, {\n            token : \"constant.language\", // constants\n            regex : \"\\\\b(?:[A-Z0-9_]+)\\\\b\"\n        }, {\n            token : \"string.unquoted\",\n            regex : \"\\\\w+(?:-+\\\\w+)*\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"::|=>|->|\\\\?->|\\\\?\\\\?->|\\\\+\\\\+|--|<<|>>|<=>|<=|>=|===|!==|==|!=|<>|&&|\\\\|\\\\||\\\\?\\\\?|\\\\?>|\\\\*\\\\*|\\\\.\\\\.\\\\.|[^'\\\"]\" // =>, any char except quotes\n        }\n    ];\n\n    this.normalizeRules();\n};\n\noop.inherits(LatteHighlightRules, TextHighlightRules);\n\nexports.LatteHighlightRules = LatteHighlightRules;\n"],"names":[],"sourceRoot":""}