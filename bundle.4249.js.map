{"version":3,"file":"bundle.4249.js","mappings":";;;;;;AAAa;;AAEb,gDAAiD;AACjD,aAAa;;;;;;;;ACHb;AACA;AACA;AACA,eAAe,IAAI,KAAK,IAAI,KAAK,GAAG,GAAG;AACvC;AACA;AACA,gBAAgB,IAAI,KAAK,GAAG,GAAG;AAC/B;AACA;AACA,eAAe,IAAI,KAAK,GAAG,GAAG;AAC9B;AACA;AACA,sBAAsB,IAAI,KAAK,GAAG,GAAG;AACrC;AACA;AACA,cAAc,IAAI,KAAK,GAAG,GAAG;AAC7B;AACA;AACA,aAAa,IAAI,KAAK,GAAG,GAAG;AAC5B;AACA;AACA,aAAa,MAAM,KAAK,IAAI,KAAK,GAAG,GAAG;AACvC;AACA;AACA,kBAAkB,IAAI,KAAK,GAAG,GAAG;AACjC;AACA;AACA,kBAAkB,MAAM,KAAK,IAAI,KAAK,GAAG,GAAG;AAC5C;AACA;AACA,uBAAuB,IAAI,KAAK,GAAG,GAAG;AACtC;AACA;AACA,uBAAuB,MAAM,KAAK,IAAI,KAAK,GAAG,GAAG;AACjD;AACA;AACA,4BAA4B,IAAI,KAAK,GAAG,GAAG;AAC3C;AACA;AACA,4BAA4B,MAAM,KAAK,IAAI,KAAK,GAAG,GAAG;AACtD;AACA;AACA,eAAe,IAAI,KAAK,GAAG,GAAG;AAC9B;AACA;AACA,eAAe,IAAI,KAAK,GAAG,GAAG;AAC9B;AACA;AACA,wBAAwB,IAAI,KAAK,GAAG,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,QAAQ,GAAG,mCAAmC,KAAK,iBAAiB,IAAI,EAAE;AAC9E,KAAK;AACL;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,iBAAiB,GAAG,aAAa,GAAG;AACpC;AACA;AACA,gBAAgB,GAAG,GAAG;AACtB;AACA;AACA;AACA;AACA,aAAa,KAAK,KAAK,SAAS,UAAU,MAAM,KAAK;AACrD,KAAK;AACL,EAAE,GAAG;;AAEL;AACA;AACA,SAAS,QAAQ,GAAG,KAAK,KAAK,YAAY;AAC1C,KAAK;AACL,EAAE,GAAG;AACL;AACA;AACA,SAAS,cAAc,IAAI,OAAO,MAAM,kBAAkB,GAAG,KAAK,KAAK,YAAY,UAAU,kBAAkB;AAC/G,KAAK;AACL,EAAE,GAAG;;AAEL;AACA;AACA,cAAc,KAAK,eAAe,kBAAkB;AACpD,KAAK;AACL,EAAE,GAAG;AACL;AACA;AACA;AACA;AACA,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,cAAc,GAAG;AACpC;AACA;AACA,KAAK,EAAE,KAAK,EAAE;AACd,KAAK;AACL,EAAE,GAAG;AACL","sources":["webpack://ace-playground/./node_modules/ace-code/src/snippets/c_cpp.js","webpack://ace-playground/./node_modules/ace-code/src/snippets/c_cpp.snippets.js"],"sourcesContent":["\"use strict\";\n\nexports.snippetText = require(\"./c_cpp.snippets\");\nexports.scope = \"c_cpp\";\n","module.exports = `## STL Collections\n# std::array\nsnippet array\n\tstd::array<\\${1:T}, \\${2:N}> \\${3};\\${4}\n# std::vector\nsnippet vector\n\tstd::vector<\\${1:T}> \\${2};\\${3}\n# std::deque\nsnippet deque\n\tstd::deque<\\${1:T}> \\${2};\\${3}\n# std::forward_list\nsnippet flist\n\tstd::forward_list<\\${1:T}> \\${2};\\${3}\n# std::list\nsnippet list\n\tstd::list<\\${1:T}> \\${2};\\${3}\n# std::set\nsnippet set\n\tstd::set<\\${1:T}> \\${2};\\${3}\n# std::map\nsnippet map\n\tstd::map<\\${1:Key}, \\${2:T}> \\${3};\\${4}\n# std::multiset\nsnippet mset\n\tstd::multiset<\\${1:T}> \\${2};\\${3}\n# std::multimap\nsnippet mmap\n\tstd::multimap<\\${1:Key}, \\${2:T}> \\${3};\\${4}\n# std::unordered_set\nsnippet uset\n\tstd::unordered_set<\\${1:T}> \\${2};\\${3}\n# std::unordered_map\nsnippet umap\n\tstd::unordered_map<\\${1:Key}, \\${2:T}> \\${3};\\${4}\n# std::unordered_multiset\nsnippet umset\n\tstd::unordered_multiset<\\${1:T}> \\${2};\\${3}\n# std::unordered_multimap\nsnippet ummap\n\tstd::unordered_multimap<\\${1:Key}, \\${2:T}> \\${3};\\${4}\n# std::stack\nsnippet stack\n\tstd::stack<\\${1:T}> \\${2};\\${3}\n# std::queue\nsnippet queue\n\tstd::queue<\\${1:T}> \\${2};\\${3}\n# std::priority_queue\nsnippet pqueue\n\tstd::priority_queue<\\${1:T}> \\${2};\\${3}\n##\n## Access Modifiers\n# private\nsnippet pri\n\tprivate\n# protected\nsnippet pro\n\tprotected\n# public\nsnippet pub\n\tpublic\n# friend\nsnippet fr\n\tfriend\n# mutable\nsnippet mu\n\tmutable\n## \n## Class\n# class\nsnippet cl\n\tclass \\${1:\\`Filename('\\$1', 'name')\\`} \n\t{\n\tpublic:\n\t\t\\$1(\\${2});\n\t\t~\\$1();\n\n\tprivate:\n\t\t\\${3:/* data */}\n\t};\n# member function implementation\nsnippet mfun\n\t\\${4:void} \\${1:\\`Filename('\\$1', 'ClassName')\\`}::\\${2:memberFunction}(\\${3}) {\n\t\t\\${5:/* code */}\n\t}\n# namespace\nsnippet ns\n\tnamespace \\${1:\\`Filename('', 'my')\\`} {\n\t\t\\${2}\n\t} /* namespace \\$1 */\n##\n## Input/Output\n# std::cout\nsnippet cout\n\tstd::cout << \\${1} << std::endl;\\${2}\n# std::cin\nsnippet cin\n\tstd::cin >> \\${1};\\${2}\n##\n## Iteration\n# for i \nsnippet fori\n\tfor (int \\${2:i} = 0; \\$2 < \\${1:count}; \\$2\\${3:++}) {\n\t\t\\${4:/* code */}\n\t}\\${5}\n\n# foreach\nsnippet fore\n\tfor (\\${1:auto} \\${2:i} : \\${3:container}) {\n\t\t\\${4:/* code */}\n\t}\\${5}\n# iterator\nsnippet iter\n\tfor (\\${1:std::vector}<\\${2:type}>::\\${3:const_iterator} \\${4:i} = \\${5:container}.begin(); \\$4 != \\$5.end(); ++\\$4) {\n\t\t\\${6}\n\t}\\${7}\n\n# auto iterator\nsnippet itera\n\tfor (auto \\${1:i} = \\$1.begin(); \\$1 != \\$1.end(); ++\\$1) {\n\t\t\\${2:std::cout << *\\$1 << std::endl;}\n\t}\\${3}\n##\n## Lambdas\n# lamda (one line)\nsnippet ld\n\t[\\${1}](\\${2}){\\${3:/* code */}}\\${4}\n# lambda (multi-line)\nsnippet lld\n\t[\\${1}](\\${2}){\n\t\t\\${3:/* code */}\n\t}\\${4}\n`;\n"],"names":[],"sourceRoot":""}