{"version":3,"file":"bundle.1085.js","mappings":";;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;AACb,UAAU,mBAAO,CAAC,KAAe;AACjC,cAAc,mBAAO,CAAC,KAAqB;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,YAAY;AACnD,0BAA0B,OAAO,UAAU,QAAQ,QAAQ;AAC3D,wBAAwB;AACxB,wDAAwD;AACxD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;AC/DD;AACA,aAAa,4BAA4B;AACzC;;;AAGa;;AAEb,UAAU,gCAAwB;AAClC,YAAY,2CAAyB;AACrC,UAAU,mBAAO,CAAC,KAAY;AAC9B,kBAAkB,mDAAuC;AACzD,eAAe,qCAAyC;AACxD,wBAAwB,8CAAkD;AAC1E,kBAAkB,iDAAqC;AACvD,gBAAgB,sCAAiC;AACjD,kBAAkB,wCAAgD;AAClE,eAAe,mBAAO,CAAC,KAAY;AACnC;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,8BAA8B;AAC5C,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,iCAAiC;AAC5C,WAAW,wBAAwB;AACnC,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,IAAI;AAClB,mCAAmC,8FAA8F;AACjI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,IAAI;AACtB,wDAAwD,mCAAmC;AAC3F;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,kBAAkB,uBAAuB;AAC9E,uCAAuC,oBAAoB,uBAAuB;AAClF,oDAAoD,qBAAqB,uBAAuB;AAChG,qDAAqD,mBAAmB,uBAAuB;AAC/F;AACA,oCAAoC;AACpC,aAAa;AACb,yCAAyC,oBAAoB,uBAAuB;AACpF,2CAA2C,sBAAsB;AACjE,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,0BAA0B;AAC1B,mDAAmD;AACnD;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD,cAAc","sources":["webpack://ace-playground/./node_modules/ace-code/src/ext/menu_tools/overlay_page.js","webpack://ace-playground/./node_modules/ace-code/src/ext/menu_tools/settings_menu.css.js","webpack://ace-playground/./node_modules/ace-code/src/ext/prompt.js"],"sourcesContent":["/*jslint indent: 4, maxerr: 50, white: true, browser: true, vars: true*/\n/*global define, require */\n\n/**\n * Overlay Page\n * @fileOverview Overlay Page <br />\n * Generates an overlay for displaying menus. The overlay is an absolutely\n *  positioned div.\n * @author <a href=\"mailto:matthewkastor@gmail.com\">\n *  Matthew Christopher Kastor-Inare III </a><br />\n *  ☭ Hial Atropa!! ☭\n */\n\n'use strict';\nvar dom = require(\"../../lib/dom\");\nvar cssText = require(\"./settings_menu.css\");\ndom.importCssString(cssText, \"settings_menu.css\", false);\n\n/**\n * Generates an overlay for displaying menus. The overlay is an absolutely\n *  positioned div.\n * @author <a href=\"mailto:matthewkastor@gmail.com\">\n *  Matthew Christopher Kastor-Inare III </a><br />\n *  ☭ Hial Atropa!! ☭\n * @param editor\n * @param {HTMLElement} contentElement Any element which may be presented inside\n *  a div.\n * @param [callback]\n */\nmodule.exports.overlayPage = function overlayPage(editor, contentElement, callback) {\n    var closer = document.createElement('div');\n    var ignoreFocusOut = false;\n\n    function documentEscListener(e) {\n        if (e.keyCode === 27) {\n            close();\n        }\n    }\n\n    function close() {\n        if (!closer) return;\n        document.removeEventListener('keydown', documentEscListener);\n        closer.parentNode.removeChild(closer);\n        if (editor) {\n            editor.focus();\n        }\n        closer = null;\n        callback && callback();\n    }\n\n     /**\n     * Defines whether overlay is closed when user clicks outside of it.\n     * \n     * @param {Boolean} ignore      If set to true overlay stays open when focus moves to another part of the editor.\n     */\n    function setIgnoreFocusOut(ignore) {\n        ignoreFocusOut = ignore;\n        if (ignore) {\n            closer.style.pointerEvents = \"none\";\n            contentElement.style.pointerEvents = \"auto\";\n        }\n    }\n\n    closer.style.cssText = 'margin: 0; padding: 0; ' +\n        'position: fixed; top:0; bottom:0; left:0; right:0;' +\n        'z-index: 9990; ' +\n        (editor ? 'background-color: rgba(0, 0, 0, 0.3);' : '');\n    closer.addEventListener('click', function(e) {\n        if (!ignoreFocusOut) {\n            close();\n        }\n    });\n    // click closer if esc key is pressed\n    document.addEventListener('keydown', documentEscListener);\n\n    contentElement.addEventListener('click', function (e) {\n        e.stopPropagation();\n    });\n\n    closer.appendChild(contentElement);\n    document.body.appendChild(closer);\n    if (editor) {\n        editor.blur();\n    }\n    return {\n        close: close,\n        setIgnoreFocusOut: setIgnoreFocusOut\n    };\n};\n","module.exports = `#ace_settingsmenu, #kbshortcutmenu {\n    background-color: #F7F7F7;\n    color: black;\n    box-shadow: -5px 4px 5px rgba(126, 126, 126, 0.55);\n    padding: 1em 0.5em 2em 1em;\n    overflow: auto;\n    position: absolute;\n    margin: 0;\n    bottom: 0;\n    right: 0;\n    top: 0;\n    z-index: 9991;\n    cursor: default;\n}\n\n.ace_dark #ace_settingsmenu, .ace_dark #kbshortcutmenu {\n    box-shadow: -20px 10px 25px rgba(126, 126, 126, 0.25);\n    background-color: rgba(255, 255, 255, 0.6);\n    color: black;\n}\n\n.ace_optionsMenuEntry:hover {\n    background-color: rgba(100, 100, 100, 0.1);\n    transition: all 0.3s\n}\n\n.ace_closeButton {\n    background: rgba(245, 146, 146, 0.5);\n    border: 1px solid #F48A8A;\n    border-radius: 50%;\n    padding: 7px;\n    position: absolute;\n    right: -8px;\n    top: -8px;\n    z-index: 100000;\n}\n.ace_closeButton{\n    background: rgba(245, 146, 146, 0.9);\n}\n.ace_optionsMenuKey {\n    color: darkslateblue;\n    font-weight: bold;\n}\n.ace_optionsMenuCommand {\n    color: darkcyan;\n    font-weight: normal;\n}\n.ace_optionsMenuEntry input, .ace_optionsMenuEntry button {\n    vertical-align: middle;\n}\n\n.ace_optionsMenuEntry button[ace_selected_button=true] {\n    background: #e7e7e7;\n    box-shadow: 1px 0px 2px 0px #adadad inset;\n    border-color: #adadad;\n}\n.ace_optionsMenuEntry button {\n    background: white;\n    border: 1px solid lightgray;\n    margin: 0px;\n}\n.ace_optionsMenuEntry button:hover{\n    background: #f0f0f0;\n}`;\n","/**\n * @typedef {import(\"../editor\").Editor} Editor\n */\n\n\n\"use strict\";\n\nvar nls = require(\"../config\").nls;\nvar Range = require(\"../range\").Range;\nvar dom = require(\"../lib/dom\");\nvar FilteredList= require(\"../autocomplete\").FilteredList;\nvar AcePopup = require('../autocomplete/popup').AcePopup;\nvar $singleLineEditor = require('../autocomplete/popup').$singleLineEditor;\nvar UndoManager = require(\"../undomanager\").UndoManager;\nvar Tokenizer = require(\"../tokenizer\").Tokenizer;\nvar overlayPage = require(\"./menu_tools/overlay_page\").overlayPage;\nvar modelist = require(\"./modelist\");\nvar openPrompt;\n\n/**\n * @typedef PromptOptions\n * @property {String} name             Prompt name.\n * @property {String} $type            Use prompt of specific type (gotoLine|commands|modes or default if empty).\n * @property {[start: number, end: number]} selection  Defines which part of the predefined value should be highlited.\n * @property {Boolean} hasDescription  Set to true if prompt has description below input box.\n * @property {String} prompt           Description below input box.\n * @property {String} placeholder      Placeholder for value.\n * @property {Object} $rules           Specific rules for input like password or regexp.\n * @property {Boolean} ignoreFocusOut  Set to true to keep the prompt open when focus moves to another part of the editor.\n * @property {Function} getCompletions Function for defining list of options for value.\n * @property {Function} getPrefix      Function for defining current value prefix.\n * @property {Function} onAccept       Function called when Enter is pressed.\n * @property {Function} onInput        Function called when input is added to prompt input box.\n * @property {Function} onCancel       Function called when Esc|Shift-Esc is pressed.\n * @property {Function} history        Function for defining history list.\n * @property {number} maxHistoryCount\n * @property {Function} addToHistory\n */\n\n/**\n * Prompt plugin is used for getting input from user.\n *\n * @param {Editor} editor                   Ouside editor related to this prompt. Will be blurred when prompt is open.\n * @param {String | Partial<PromptOptions>} message                  Predefined value of prompt input box.\n * @param {Partial<PromptOptions>} options                  Cusomizable options for this prompt.\n * @param {Function} [callback]               Function called after done.\n * */\nfunction prompt(editor, message, options, callback) {\n    if (typeof message == \"object\") {\n        // @ts-ignore\n        return prompt(editor, \"\", message, options);\n    }\n    if (openPrompt) {\n        var lastPrompt = openPrompt;\n        editor = lastPrompt.editor;\n        lastPrompt.close();\n        if (lastPrompt.name && lastPrompt.name == options.name)\n            return;\n    }\n    if (options.$type)\n       return prompt[options.$type](editor, callback);\n\n    var cmdLine = $singleLineEditor();\n    cmdLine.session.setUndoManager(new UndoManager());\n\n    /**@type {any}*/\n    var el = dom.buildDom([\"div\", {class: \"ace_prompt_container\" + (options.hasDescription ? \" input-box-with-description\" : \"\")}]);\n    var overlay = overlayPage(editor, el, done);\n    el.appendChild(cmdLine.container);\n\n    if (editor) {\n        editor.cmdLine = cmdLine;\n        cmdLine.setOption(\"fontSize\", editor.getOption(\"fontSize\"));\n    }\n    if (message) {\n        cmdLine.setValue(message, 1);\n    }\n    if (options.selection) {\n        cmdLine.selection.setRange({\n            start: cmdLine.session.doc.indexToPosition(options.selection[0]),\n            end: cmdLine.session.doc.indexToPosition(options.selection[1])\n        });\n    }\n\n    if (options.getCompletions) {\n        var popup = new AcePopup();\n        popup.renderer.setStyle(\"ace_autocomplete_inline\");\n        popup.container.style.display = \"block\";\n        popup.container.style.maxWidth = \"600px\";\n        popup.container.style.width = \"100%\";\n        popup.container.style.marginTop = \"3px\";\n        popup.renderer.setScrollMargin(2, 2, 0, 0);\n        popup.autoSelect = false;\n        popup.renderer.$maxLines = 15;\n        popup.setRow(-1);\n        popup.on(\"click\", function(e) {\n            var data = popup.getData(popup.getRow());\n            if (!data[\"error\"]) {\n                cmdLine.setValue(data.value || data[\"name\"] || data);\n                accept();\n                e.stop();\n            }\n        });\n        el.appendChild(popup.container);\n        updateCompletions();\n    }\n\n    if (options.$rules) {\n        var tokenizer = new Tokenizer(options.$rules);\n        cmdLine.session.bgTokenizer.setTokenizer(tokenizer);\n    }\n\n    if (options.placeholder) {\n        cmdLine.setOption(\"placeholder\", options.placeholder);\n    }\n\n    if (options.hasDescription) {\n        /**@type {any}*/\n        var promptTextContainer = dom.buildDom([\"div\", {class: \"ace_prompt_text_container\"}]);\n        dom.buildDom(options.prompt || \"Press 'Enter' to confirm or 'Escape' to cancel\", promptTextContainer);\n        el.appendChild(promptTextContainer);\n    }\n\n    overlay.setIgnoreFocusOut(options.ignoreFocusOut);\n\n    function accept() {\n        var val;\n        if (popup && popup.getCursorPosition().row > 0) {\n            val = valueFromRecentList();\n        } else {\n            val = cmdLine.getValue();\n        }\n        var curData = popup ? popup.getData(popup.getRow()) : val;\n        if (curData && !curData[\"error\"]) {\n            done();\n            options.onAccept && options.onAccept({\n                value: val,\n                item: curData\n            }, cmdLine);\n        }\n    }\n\n    var keys = {\n        \"Enter\": accept,\n        \"Esc|Shift-Esc\": function() {\n            options.onCancel && options.onCancel(cmdLine.getValue(), cmdLine);\n            done();\n        }\n    };\n\n    if (popup) {\n        Object.assign(keys, {\n            \"Up\": function(editor) { popup.goTo(\"up\"); valueFromRecentList();},\n            \"Down\": function(editor) { popup.goTo(\"down\"); valueFromRecentList();},\n            \"Ctrl-Up|Ctrl-Home\": function(editor) { popup.goTo(\"start\"); valueFromRecentList();},\n            \"Ctrl-Down|Ctrl-End\": function(editor) { popup.goTo(\"end\"); valueFromRecentList();},\n            \"Tab\": function(editor) {\n                popup.goTo(\"down\"); valueFromRecentList();\n            },\n            \"PageUp\": function(editor) { popup.gotoPageUp(); valueFromRecentList();},\n            \"PageDown\": function(editor) { popup.gotoPageDown(); valueFromRecentList();}\n        });\n    }\n\n    cmdLine.commands.bindKeys(keys);\n\n    function done() {\n        overlay.close();\n        callback && callback();\n        openPrompt = null;\n    }\n\n    cmdLine.on(\"input\", function() {\n        options.onInput && options.onInput();\n        updateCompletions();\n    });\n\n    function updateCompletions() {\n        if (options.getCompletions) {\n            var prefix;\n            if (options.getPrefix) {\n                prefix = options.getPrefix(cmdLine);\n            }\n\n            var completions = options.getCompletions(cmdLine);\n            popup.setData(completions, prefix);\n            popup.resize(true);\n        }\n    }\n\n    function valueFromRecentList() {\n        var current = popup.getData(popup.getRow());\n        if (current && !current[\"error\"])\n            return current.value || current.caption || current;\n    }\n\n    cmdLine.resize(true);\n    if (popup) {\n        popup.resize(true);\n    }\n    cmdLine.focus();\n\n    openPrompt = {\n        close: done,\n        name: options.name,\n        editor: editor\n    };\n}\n\n/**\n * \n * @param {Editor} editor\n * @param {Function} [callback]\n */\nprompt.gotoLine = function(editor, callback) {\n    function stringifySelection(selection) {\n        if (!Array.isArray(selection))\n            selection = [selection];\n        return selection.map(function(r) {\n            var cursor = r.isBackwards ? r.start: r.end;\n            var anchor = r.isBackwards ? r.end: r.start;\n            var row = anchor.row;\n            var s = (row + 1) + \":\" + anchor.column;\n\n            if (anchor.row == cursor.row) {\n                if (anchor.column != cursor.column)\n                    s += \">\" + \":\" + cursor.column;\n            } else {\n                s += \">\" + (cursor.row + 1) + \":\" + cursor.column;\n            }\n            return s;\n        }).reverse().join(\", \");\n    }\n\n    prompt(editor, \":\" + stringifySelection(editor.selection.toJSON()), {\n        name: \"gotoLine\",\n        selection: [1, Number.MAX_VALUE],\n        onAccept: function(data) {\n            var value = data.value;\n            var _history = prompt.gotoLine[\"_history\"];\n            if (!_history)\n                prompt.gotoLine[\"_history\"] = _history = [];\n            if (_history.indexOf(value) != -1)\n                _history.splice(_history.indexOf(value), 1);\n            _history.unshift(value);\n            if (_history.length > 20) _history.length = 20;\n            \n            \n            var pos = editor.getCursorPosition();\n            var ranges = [];\n            value.replace(/^:/, \"\").split(/,/).map(function(str) {\n                var parts = str.split(/([<>:+-]|c?\\d+)|[^c\\d<>:+-]+/).filter(Boolean);\n                var i = 0;\n                function readPosition() {\n                    var c = parts[i++];\n                    if (!c) return;\n                    if (c[0] == \"c\") {\n                        var index = parseInt(c.slice(1)) || 0;\n                        return editor.session.doc.indexToPosition(index);\n                    }\n                    var row = pos.row;\n                    var column = 0;\n                    if (/\\d/.test(c)) {\n                        row = parseInt(c) - 1;\n                        c = parts[i++];\n                    }\n                    if (c == \":\") {\n                        c = parts[i++];\n                        if (/\\d/.test(c)) {\n                            column = parseInt(c) || 0;\n                        }\n                    }\n                    return {row: row, column: column};\n                }\n                pos = readPosition();\n                var range = Range.fromPoints(pos, pos);\n                if (parts[i] == \">\") {\n                    i++;\n                    range.end = readPosition();\n                }\n                else if (parts[i] == \"<\") {\n                    i++;\n                    range.start = readPosition();\n                }\n                ranges.unshift(range);\n            });\n            editor.selection.fromJSON(ranges);\n            var scrollTop = editor.renderer.scrollTop;\n            editor.renderer.scrollSelectionIntoView(\n                editor.selection.anchor, \n                editor.selection.cursor, \n                0.5\n            );\n            editor.renderer.animateScrolling(scrollTop);\n        },\n        history: function() {\n            if (!prompt.gotoLine[\"_history\"])\n                return [];\n            return prompt.gotoLine[\"_history\"];\n\n        },\n        getCompletions: function(cmdLine) {\n            var value = cmdLine.getValue();\n            var m = value.replace(/^:/, \"\").split(\":\");\n            var row = Math.min(parseInt(m[0]) || 1, editor.session.getLength()) - 1;\n            var line = editor.session.getLine(row);\n            var current = value + \"  \" + line;\n            return [current].concat(this.history());\n        },\n        $rules: {\n            start: [{\n                regex: /\\d+/,\n                token: \"string\"\n            }, {\n                regex: /[:,><+\\-c]/,\n                token: \"keyword\"\n            }]\n        }\n    });\n};\n\n/**\n * \n * @param {Editor} editor\n * @param {Function} [callback]\n */\nprompt.commands = function(editor, callback) {\n    function normalizeName(name) {\n        return (name || \"\").replace(/^./, function(x) {\n            return x.toUpperCase(x);\n        }).replace(/[a-z][A-Z]/g, function(x) {\n            return x[0] + \" \" + x[1].toLowerCase(x);\n        });\n    }\n    function getEditorCommandsByName(excludeCommands) {\n        var commandsByName = [];\n        var commandMap = {};\n        editor.keyBinding.$handlers.forEach(function(handler) {\n            var platform = handler[\"platform\"];\n            var cbn = handler[\"byName\"];\n            for (var i in cbn) {\n                var key = cbn[i].bindKey;\n                if (typeof key !== \"string\") {\n                    key = key && key[platform] || \"\";\n                }\n                var commands = cbn[i];\n                var description = commands.description || normalizeName(commands.name);\n                if (!Array.isArray(commands))\n                    commands = [commands];\n                commands.forEach(function(command) {\n                    if (typeof command != \"string\")\n                        command = command.name;\n                    var needle = excludeCommands.find(function(el) {\n                        return el === command;\n                    });\n                    if (!needle) {\n                        if (commandMap[command]) {\n                            commandMap[command].key += \"|\" + key;\n                        } else {\n                            commandMap[command] = {key: key, command: command, description: description};\n                            commandsByName.push(commandMap[command]);\n                        }\n                    }\n                });\n            }\n        });\n        return commandsByName;\n    }\n    // exclude commands that can not be executed without args\n    var excludeCommandsList = [\"insertstring\", \"inserttext\", \"setIndentation\", \"paste\"];\n    var shortcutsArray = getEditorCommandsByName(excludeCommandsList);\n    shortcutsArray = shortcutsArray.map(function(item) {\n        return {value: item.description, meta: item.key, command: item.command};\n    });\n    prompt(editor, \"\",  {\n        name: \"commands\",\n        selection: [0, Number.MAX_VALUE],\n        maxHistoryCount: 5,\n        onAccept: function(data) {\n            if (data.item) {\n                var commandName = data.item.command;\n                this.addToHistory(data.item);\n\n                editor.execCommand(commandName);\n            }\n        },\n        addToHistory: function(item) {\n            var history = this.history();\n            history.unshift(item);\n            delete item.message;\n            for (var i = 1; i < history.length; i++) {\n                if (history[i][\"command\"] == item.command ) {\n                    history.splice(i, 1);\n                    break;\n                }\n            }\n            if (this.maxHistoryCount > 0 && history.length > this.maxHistoryCount) {\n                history.splice(history.length - 1, 1);\n            }\n            prompt.commands[\"history\"] = history;\n        },\n        history: function() {\n            return prompt.commands[\"history\"] || [];\n        },\n        getPrefix: function(cmdLine) {\n            var currentPos = cmdLine.getCursorPosition();\n            var filterValue = cmdLine.getValue();\n            return filterValue.substring(0, currentPos.column);\n        },\n        getCompletions: function(cmdLine) {\n            function getFilteredCompletions(commands, prefix) {\n                var resultCommands = JSON.parse(JSON.stringify(commands));\n\n                var filtered = new FilteredList(resultCommands);\n                return filtered.filterCompletions(resultCommands, prefix);\n            }\n\n            function getUniqueCommandList(commands, usedCommands) {\n                if (!usedCommands || !usedCommands.length) {\n                    return commands;\n                }\n                var excludeCommands = [];\n                usedCommands.forEach(function(item) {\n                    excludeCommands.push(item.command);\n                });\n\n                var resultCommands = [];\n\n                commands.forEach(function(item) {\n                    if (excludeCommands.indexOf(item.command) === -1) {\n                        resultCommands.push(item);\n                    }\n                });\n\n                return resultCommands;\n            }\n\n            var prefix = this.getPrefix(cmdLine);\n            var recentlyUsedCommands = getFilteredCompletions(this.history(), prefix);\n            var otherCommands = getUniqueCommandList(shortcutsArray, recentlyUsedCommands);\n            otherCommands = getFilteredCompletions(otherCommands, prefix);\n\n            if (recentlyUsedCommands.length && otherCommands.length) {\n                recentlyUsedCommands[0].message = nls(\"Recently used\");\n                otherCommands[0].message = nls(\"Other commands\");\n            }\n\n            var completions = recentlyUsedCommands.concat(otherCommands);\n            return completions.length > 0 ? completions : [{\n                value: nls(\"No matching commands\"),\n                error: 1\n            }];\n        }\n    });\n};\n\n/**\n *\n * @param {Editor} editor\n * @param {Function} [callback]\n */\nprompt.modes = function(editor, callback) {\n    /**@type {any[]}*/\n    var modesArray = modelist.modes;\n    modesArray = modesArray.map(function(item) {\n        return {value: item.caption, mode: item.name};\n    });\n    prompt(editor, \"\",  {\n        name: \"modes\",\n        selection: [0, Number.MAX_VALUE],\n        onAccept: function(data) {\n            if (data.item) {\n                var modeName = \"ace/mode/\" + data.item.mode;\n                editor.session.setMode(modeName);\n            }\n        },\n        getPrefix: function(cmdLine) {\n            var currentPos = cmdLine.getCursorPosition();\n            var filterValue = cmdLine.getValue();\n            return filterValue.substring(0, currentPos.column);\n        },\n        getCompletions: function(cmdLine) {\n            function getFilteredCompletions(modes, prefix) {\n                var resultCommands = JSON.parse(JSON.stringify(modes));\n\n                var filtered = new FilteredList(resultCommands);\n                return filtered.filterCompletions(resultCommands, prefix);\n            }\n\n            var prefix = this.getPrefix(cmdLine);\n            var completions = getFilteredCompletions(modesArray, prefix);\n            return completions.length > 0 ? completions : [{\n                \"caption\": \"No mode matching\",\n                \"value\": \"No mode matching\",\n                \"error\": 1\n            }];\n        }\n    });\n};\n\ndom.importCssString(`.ace_prompt_container {\n    max-width: 603px;\n    width: 100%;\n    margin: 20px auto;\n    padding: 3px;\n    background: white;\n    border-radius: 2px;\n    box-shadow: 0px 2px 3px 0px #555;\n}`, \"promtp.css\", false);\n\n\nexports.prompt = prompt;\n"],"names":[],"sourceRoot":""}