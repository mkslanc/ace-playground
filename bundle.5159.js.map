{"version":3,"file":"bundle.5159.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,YAAY,2CAA4B;AACxC,mBAAmB,qCAA+B;;AAElD,eAAe,SAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,UAAU;AAC7C,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AC9JD;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,2BAA2B,0DAAwD;AACnF;AACA,eAAe,8CAAoC;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,CAAC;;AAED,YAAY;;;;;;;;ACzBZ;AACA;AACA;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;AAE7E;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,wBAAwB;AACxB;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,SAA4B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://ace-playground/./node_modules/ace-code/src/mode/prisma.js","webpack://ace-playground/./node_modules/ace-code/src/mode/prisma_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\n// TODO: pick appropriate fold mode\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    // this.blockComment = {start: \"\"/*\"\", end: \"\"*/\"\"};\n    // Extra logic goes here.\n    this.$id = \"ace/mode/prisma\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/* This file was autogenerated from ../convert.json (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrismaHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        start: [{\n            include: \"#triple_comment\"\n        }, {\n            include: \"#double_comment\"\n        }, {\n            include: \"#model_block_definition\"\n        }, {\n            include: \"#config_block_definition\"\n        }, {\n            include: \"#enum_block_definition\"\n        }, {\n            include: \"#type_definition\"\n        }],\n        \"#model_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#field_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#enum_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#enum_value_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#config_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"source.prisma.embedded.source\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#assignment\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#assignment\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\",\n                \"keyword.operator.terraform\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n            push: [{\n                token: \"text\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                include: \"#double_comment_inline\"\n            }]\n        }],\n        \"#field_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"invalid.illegal.colon.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\",\n                \"keyword.operator.list_type.prisma\",\n                \"keyword.operator.optional_type.prisma\",\n                \"invalid.illegal.required_type.prisma\"\n            ],\n            regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#type_definition\": [{\n            token: [\n                \"text\",\n                \"storage.type.type.prisma\",\n                \"text\",\n                \"entity.name.type.type.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\"\n            ],\n            regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#enum_value_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*$)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#attribute_with_arguments\": [{\n            token: [\n                \"entity.name.function.attribute.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(@@?[\\w\\.]+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#named_argument\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.attribute.with_arguments\"\n            }]\n        }],\n        \"#attribute\": [{\n            token: \"entity.name.function.attribute.prisma\",\n            regex: /@@?[\\w\\.]+/\n        }],\n        \"#array\": [{\n            token: \"source.prisma.array\",\n            regex: /\\[/,\n            push: [{\n                token: \"source.prisma.array\",\n                regex: /\\]/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.array\"\n            }]\n        }],\n        \"#value\": [{\n            include: \"#array\"\n        }, {\n            include: \"#functional\"\n        }, {\n            include: \"#literal\"\n        }],\n        \"#functional\": [{\n            token: [\n                \"support.function.functional.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(\\w+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.functional\"\n            }]\n        }],\n        \"#literal\": [{\n            include: \"#boolean\"\n        }, {\n            include: \"#number\"\n        }, {\n            include: \"#double_quoted_string\"\n        }, {\n            include: \"#identifier\"\n        }],\n        \"#identifier\": [{\n            token: \"support.constant.constant.prisma\",\n            regex: /\\b(?:\\w)+\\b/\n        }],\n        \"#map_key\": [{\n            token: [\n                \"variable.parameter.key.prisma\",\n                \"text\",\n                \"punctuation.definition.separator.key-value.prisma\",\n                \"text\"\n            ],\n            regex: /(\\w+)(\\s*)(:)(\\s*)/\n        }],\n        \"#named_argument\": [{\n            include: \"#map_key\"\n        }, {\n            include: \"#value\"\n        }],\n        \"#triple_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment_inline\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/[^$]*/\n        }],\n        \"#boolean\": [{\n            token: \"constant.language.boolean.prisma\",\n            regex: /\\b(?:true|false)\\b/\n        }],\n        \"#number\": [{\n            token: \"constant.numeric.prisma\",\n            regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n        }],\n        \"#double_quoted_string\": [{\n            token: \"string.quoted.double.start.prisma\",\n            regex: /\"/,\n            push: [{\n                token: \"string.quoted.double.end.prisma\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                include: \"#string_interpolation\"\n            }, {\n                token: \"string.quoted.double.prisma\",\n                regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n            }, {\n                defaultToken: \"unnamed\"\n            }]\n        }],\n        \"#string_interpolation\": [{\n            token: \"keyword.control.interpolation.start.prisma\",\n            regex: /\\$\\{/,\n            push: [{\n                token: \"keyword.control.interpolation.end.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.tag.embedded.source.prisma\"\n            }]\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nPrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n};\n\n\noop.inherits(PrismaHighlightRules, TextHighlightRules);\n\nexports.PrismaHighlightRules = PrismaHighlightRules;\n"],"names":[],"sourceRoot":""}