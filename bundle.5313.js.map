{"version":3,"file":"bundle.5313.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,mBAAmB,qCAA+B;;AAElD,eAAe,SAAgB;AAC/B,gDAAgD;AAChD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACxBY;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,2BAA2B,0DAAwD;AACnF,qBAAqB,6CAAsC;AAC3D,YAAY,2CAAyB;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED,YAAY;;;;;;;;ACtFZ;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;AAE7E;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,EAAE,OAAO,EAAE,+BAA+B,EAAE,cAAc,EAAE;;AAEtG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,EAAE;AAClC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,EAAE;AAClC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC,EAAE;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC,EAAE;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,qCAAqC,EAAE;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,qCAAqC,EAAE;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,wCAAwC,EAAE;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,wCAAwC,EAAE;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,yBAAyB;AACzB,SAAS;AACT;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA;AACA,UAAU;AACV;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,sBAAsB,EAAE;AACxB;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,SAAS;AACT,8BAA8B;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,SAA4B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/pythonic.js","webpack://ace-playground/./node_modules/ace-code/src/mode/python.js","webpack://ace-playground/./node_modules/ace-code/src/mode/python_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PythonHighlightRules = require(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n    this.$pairQuotesAfter = {\n        \"'\": /[ruf]/i,\n        '\"': /[ruf]/i\n    };\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    \n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        \n        if (!tokens)\n            return false;\n        \n        // ignore trailing comments\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        \n        if (!last)\n            return false;\n        \n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        // outdenting in python is slightly different because it always applies\n        // to the next line and only of a new line is inserted\n        \n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n    this.snippetFileId = \"ace/snippets/python\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/*\n * TODO: python delimiters\n */\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PythonHighlightRules = function() {\n\n    var keywords = (\n        \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await|nonlocal\"\n    );\n\n    var builtinConstants = (\n        \"True|False|None|NotImplemented|Ellipsis|__debug__\"\n    );\n\n    var builtinFunctions = (\n        \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|bin|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|apply|delattr|help|next|setattr|set|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern|\" +\n        \"ascii|breakpoint|bytes\"\n    );\n\n    //var futureReserved = \"\";\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"variable.language\": \"self|cls\",\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n\n    var strPre = \"[uU]?\";\n    var strRawPre = \"[rR]\";\n    var strFormatPre = \"[fF]\";\n    var strRawFormatPre = \"(?:[rR][fF]|[fF][rR])\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : strPre + '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : strPre + '\"(?=.)',\n            next : \"qqstring\"\n        }, {\n            token : \"string\",           // multi line ''' string start\n            regex : strPre + \"'{3}\",\n            next : \"qstring3\"\n        }, {\n            token : \"string\",           // ' string\n            regex : strPre + \"'(?=.)\",\n            next : \"qstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + '\"{3}',\n            next: \"rawqqstring3\"\n        }, {\n            token: \"string\", \n            regex: strRawPre + '\"(?=.)',\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'{3}\",\n            next: \"rawqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'(?=.)\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"{3}',\n            next: \"fqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"(?=.)',\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'{3}\",\n            next: \"fqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'(?=.)\",\n            next: \"fqstring\"\n        },{\n            token: \"string\",\n            regex: strRawFormatPre + '\"{3}',\n            next: \"rfqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + '\"(?=.)',\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'{3}\",\n            next: \"rfqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'(?=.)\",\n            next: \"rfqstring\"\n        }, {\n            token: \"keyword.operator\",\n            regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|@|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token: \"punctuation\",\n            regex: \",|:|;|\\\\->|\\\\+=|\\\\-=|\\\\*=|\\\\/=|\\\\/\\\\/=|%=|@=|&=|\\\\|=|^=|>>=|<<=|\\\\*\\\\*=\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token: [\"keyword\", \"text\", \"entity.name.function\"],\n            regex: \"(def|class)(\\\\s+)([\\\\u00BF-\\\\u1FFF\\\\u2C00-\\\\uD7FF\\\\w]+)\"\n         }, {\n            token: \"text\",\n            regex: \"\\\\s+\"\n        }, {\n            include: \"constants\"\n        }],\n        \"qqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring\": [{\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstringParRules\": [{//TODO: nested {}\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)]\"\n        }, {\n            token: \"string\",\n            regex: \"\\\\s+\"\n        }, {\n            token: \"string\",\n            regex: \"'[^']*'\"\n        }, {\n            token: \"string\",\n            regex: '\"[^\"]*\"'\n        }, {\n            token: \"function.support\",\n            regex: \"(!s|!r|!a)\"\n        }, {\n            include: \"constants\"\n        },{\n            token: 'paren.rparen',\n            regex: \"}\",\n            next: 'pop'\n        },{\n            token: 'paren.lparen',\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }],\n        \"constants\": [{\n            token: \"constant.numeric\", // imaginary\n            regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // float\n            regex: floatNumber\n        }, {\n            token: \"constant.numeric\", // long integer\n            regex: integer + \"[lL]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // integer\n            regex: integer + \"\\\\b\"\n        }, {\n            token: [\"punctuation\", \"function.support\"],// method\n            regex: \"(\\\\.)([a-zA-Z_]+)\\\\b\"\n        }, {\n            token: keywordMapper,\n            regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(PythonHighlightRules, TextHighlightRules);\n\nexports.PythonHighlightRules = PythonHighlightRules;\n"],"names":[],"sourceRoot":""}