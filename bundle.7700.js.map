{"version":3,"file":"bundle.7700.js","mappings":";;;;;AAAA;AACA,aAAa,4BAA4B;AACzC,aAAa,iDAAiD;AAC9D;AACA,cAAc,8CAA6B;AAC3C,mBAAmB,yCAA4C;AAC/D,WAAW,mBAAO,CAAC,KAAa;AAChC,UAAU,mBAAO,CAAC,KAAY;AAC9B,UAAU,mBAAO,CAAC,IAAY;AAC9B,gBAAgB,mBAAO,CAAC,KAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,cAAc,SAAS;AACvB,gBAAgB,SAAS;AACzB,iBAAiB,SAAS;AAC1B,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,6DAA6D;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,2BAA2B;AAC3E,oDAAoD,qDAAqD;;AAEzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,gBAAgB;AAC/B,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B,yBAAyB;AACnD,0BAA0B,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA,0BAA0B,8BAA8B;AACxD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,uEAAuE;AACtG;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA,gBAAgB,mBAAmB;AACnC;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,kBAAkB;AACxB,MAAM,kBAAkB;AACxB;AACA;;AAEA,MAAM,kBAAkB;AACxB;AACA;AACA;;AAEA,MAAM,mBAAmB;AACzB;AACA;AACA;;AAEA,MAAM,kBAAkB;AACxB;AACA;;AAEA,GAAG,mBAAmB,yBAAyB;AAC/C;AACA;;AAEA,GAAG,mBAAmB,GAAG;AACzB;AACA;;AAEA,GAAG,mBAAmB,yBAAyB;AAC/C;AACA;AACA;;AAEA,GAAG;AACH;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;;AAEA,GAAG,mBAAmB,yBAAyB;AAC/C;AACA;;AAEA,GAAG,uBAAuB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA,gBAAgB,kBAAkB;AAClC,gBAAgB,kBAAkB;AAClC;AACA;;AAEA,gBAAgB,mBAAmB;AACnC;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA,aAAa,kBAAkB;AAC/B;AACA;;AAEA,aAAa,uBAAuB;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB,0BAA0B;AAC1B,yBAAyB","sources":["webpack://ace-playground/./node_modules/ace-code/src/ext/command_bar.js"],"sourcesContent":["/**\n * @typedef {import(\"../editor\").Editor} Editor\n * @typedef {import(\"../../ace-internal\").Ace.TooltipCommand} TooltipCommand\n */\nvar Tooltip = require(\"../tooltip\").Tooltip;\nvar EventEmitter = require(\"../lib/event_emitter\").EventEmitter;\nvar lang = require(\"../lib/lang\");\nvar dom = require(\"../lib/dom\");\nvar oop = require(\"../lib/oop\");\nvar useragent = require(\"../lib/useragent\");\n\nvar BUTTON_CLASS_NAME = 'command_bar_tooltip_button';\nvar VALUE_CLASS_NAME = 'command_bar_button_value';\nvar CAPTION_CLASS_NAME = 'command_bar_button_caption';\nvar KEYBINDING_CLASS_NAME = 'command_bar_keybinding';\nvar TOOLTIP_CLASS_NAME = 'command_bar_tooltip';\nvar MORE_OPTIONS_BUTTON_ID = 'MoreOptionsButton';\n\nvar defaultDelay = 100;\nvar defaultMaxElements = 4;\n\nvar minPosition = function (posA, posB) {\n    if (posB.row > posA.row) {\n        return posA;\n    } else if (posB.row === posA.row && posB.column > posA.column) {\n        return posA;\n    }\n    return posB;\n};\n\nvar keyDisplayMap = {\n    \"Ctrl\": { mac: \"^\"},\n    \"Option\": { mac: \"⌥\"},\n    \"Command\": { mac: \"⌘\"},\n    \"Cmd\": { mac: \"⌘\"},\n    \"Shift\": \"⇧\",\n    \"Left\": \"←\",\n    \"Right\": \"→\",\n    \"Up\": \"↑\",\n    \"Down\": \"↓\"\n};\n\n\n/**\n * Displays a command tooltip above the currently active line selection, with clickable elements.\n *\n * Internally it is a composite of two tooltips, one for the main tooltip and one for the \n * overflowing commands.\n * The commands are added sequentially in registration order.\n * When attached to an editor, it is either always shown or only when the active line is hovered\n * with mouse, depending on the alwaysShow property.\n */\nclass CommandBarTooltip {\n    /**\n     * @param {HTMLElement} parentNode\n     * @param {Partial<import(\"../../ace-internal\").Ace.CommandBarOptions>} [options]\n     */\n    constructor(parentNode, options) {\n        options = options || {};\n        this.parentNode = parentNode;\n        this.tooltip = new Tooltip(this.parentNode);\n        this.moreOptions = new Tooltip(this.parentNode);\n        this.maxElementsOnTooltip = options.maxElementsOnTooltip || defaultMaxElements;\n        this.$alwaysShow = options.alwaysShow || false;\n        this.eventListeners = {};\n        this.elements = {};\n        this.commands = {};\n\n        this.tooltipEl = dom.buildDom(['div', { class: TOOLTIP_CLASS_NAME }], this.tooltip.getElement());\n        this.moreOptionsEl = dom.buildDom(['div', { class: TOOLTIP_CLASS_NAME + \" tooltip_more_options\" }], this.moreOptions.getElement());\n\n        this.$showTooltipTimer = lang.delayedCall(this.$showTooltip.bind(this), options.showDelay || defaultDelay);\n        this.$hideTooltipTimer = lang.delayedCall(this.$hideTooltip.bind(this), options.hideDelay || defaultDelay);\n        this.$tooltipEnter = this.$tooltipEnter.bind(this);\n        this.$onMouseMove = this.$onMouseMove.bind(this);\n        this.$onChangeScroll = this.$onChangeScroll.bind(this);\n        this.$onEditorChangeSession = this.$onEditorChangeSession.bind(this);\n        this.$scheduleTooltipForHide = this.$scheduleTooltipForHide.bind(this);\n        this.$preventMouseEvent = this.$preventMouseEvent.bind(this);\n\n        for (var event of [\"mousedown\", \"mouseup\", \"click\"]) {\n            this.tooltip.getElement().addEventListener(event, this.$preventMouseEvent);\n            this.moreOptions.getElement().addEventListener(event, this.$preventMouseEvent);\n        }\n    }\n\n    /**\n     * Registers a command on the command bar tooltip.\n     * \n     * The commands are added in sequential order. If there is not enough space on the main\n     * toolbar, the remaining elements are added to the overflow menu.\n     * \n     * @param {string} id      \n     * @param {TooltipCommand} command\n     */\n    registerCommand(id, command) {\n        var registerForMainTooltip = Object.keys(this.commands).length < this.maxElementsOnTooltip;\n        if (!registerForMainTooltip && !this.elements[MORE_OPTIONS_BUTTON_ID]) {\n            this.$createCommand(MORE_OPTIONS_BUTTON_ID, {\n                name: \"···\",\n                exec: \n                /**\n                 * @this {CommandBarTooltip}\n                 */\n                function() {\n                    this.$shouldHideMoreOptions = false;\n                    this.$setMoreOptionsVisibility(!this.isMoreOptionsShown());\n                }.bind(this),\n                type: \"checkbox\",\n                getValue: function() {\n                    return this.isMoreOptionsShown();\n                }.bind(this),\n                enabled: true\n            }, true);\n        }\n        this.$createCommand(id, command, registerForMainTooltip);\n        if (this.isShown()) {\n            this.updatePosition();\n        }\n    }\n\n    isShown() {\n        return !!this.tooltip && this.tooltip.isOpen;\n    }\n\n    isMoreOptionsShown() {\n        return !!this.moreOptions && this.moreOptions.isOpen;\n    }\n\n    getAlwaysShow() {\n        return this.$alwaysShow;\n    }\n\n    /**\n     * Sets the display mode of the tooltip\n     * \n     * When true, the tooltip is always displayed while it is attached to an editor.\n     * When false, the tooltip is displayed only when the mouse hovers over the active editor line.\n     * \n     * @param {boolean} alwaysShow\n     */\n    setAlwaysShow(alwaysShow) {\n        this.$alwaysShow = alwaysShow;\n        this.$updateOnHoverHandlers(!this.$alwaysShow);\n        this._signal(\"alwaysShow\", this.$alwaysShow);\n    }\n\n    /**\n     * Attaches the clickable command bar tooltip to an editor\n     * \n     * Depending on the alwaysShow parameter it either displays the tooltip immediately,\n     * or subscribes to the necessary events to display the tooltip on hover.\n     * \n     * @param {Editor} editor\n     */\n    attach(editor) {\n        if (!editor || (this.isShown() && this.editor === editor)) {\n            return;\n        }\n\n        this.detach();\n\n        this.editor = editor;\n        this.editor.on(\"changeSession\", this.$onEditorChangeSession);\n        if (this.editor.session) {\n            this.editor.session.on(\"changeScrollLeft\", this.$onChangeScroll);\n            this.editor.session.on(\"changeScrollTop\", this.$onChangeScroll);\n        }\n\n        if (this.getAlwaysShow()) {\n            this.$showTooltip();\n        } else {\n            this.$updateOnHoverHandlers(true);\n        }\n    }\n\n    /**\n     * Updates the position of the command bar tooltip. It aligns itself above the active line in the editor.\n     */\n    updatePosition() {\n        if (!this.editor) {\n            return;\n        }\n        var renderer = this.editor.renderer;\n\n        var ranges;\n        if (this.editor.selection.getAllRanges) {\n            ranges = this.editor.selection.getAllRanges();\n        } else {\n            ranges = [this.editor.getSelectionRange()];\n        }\n        if (!ranges.length) {\n            return;\n        }\n        var minPos = minPosition(ranges[0].start, ranges[0].end);\n        for (var i = 0, range; range = ranges[i]; i++) {\n            minPos = minPosition(minPos, minPosition(range.start, range.end));\n        }\n\n        var pos = renderer.$cursorLayer.getPixelPosition(minPos, true);\n\n        var tooltipEl = this.tooltip.getElement();\n        var screenWidth = window.innerWidth;\n        var screenHeight = window.innerHeight;\n        var rect = this.editor.container.getBoundingClientRect();\n\n        pos.top += rect.top - renderer.layerConfig.offset;\n        pos.left += rect.left + renderer.gutterWidth - renderer.scrollLeft;\n\n        var cursorVisible = pos.top >= rect.top && pos.top <= rect.bottom &&\n            pos.left >= rect.left + renderer.gutterWidth && pos.left <= rect.right;\n\n        if (!cursorVisible && this.isShown()) {\n            this.$hideTooltip();\n            return;\n        } else if (cursorVisible && !this.isShown() && this.getAlwaysShow()) {\n            this.$showTooltip();\n            return;\n        }\n\n        var top = pos.top - tooltipEl.offsetHeight;\n        var left = Math.min(screenWidth - tooltipEl.offsetWidth, pos.left);\n\n        var tooltipFits = top >= 0 && top + tooltipEl.offsetHeight <= screenHeight &&\n            left >= 0 && left + tooltipEl.offsetWidth <= screenWidth;\n\n        if (!tooltipFits) {\n            this.$hideTooltip();\n            return;\n        }\n\n        this.tooltip.setPosition(left, top);\n\n        if (this.isMoreOptionsShown()) {\n            top = top + tooltipEl.offsetHeight;\n            left = this.elements[MORE_OPTIONS_BUTTON_ID].getBoundingClientRect().left;\n    \n            var moreOptionsEl = this.moreOptions.getElement();\n            var screenHeight = window.innerHeight;\n            if (top + moreOptionsEl.offsetHeight > screenHeight) {\n                top -= tooltipEl.offsetHeight + moreOptionsEl.offsetHeight;\n            }\n            if (left + moreOptionsEl.offsetWidth > screenWidth) {\n                left = screenWidth - moreOptionsEl.offsetWidth;\n            }\n            \n            this.moreOptions.setPosition(left, top);\n        }\n    }\n\n    /**\n     * Updates each command element in the tooltip. \n     * \n     * This is automatically called on certain events, but can be called manually as well.\n     */\n    update() {\n        Object.keys(this.elements).forEach(this.$updateElement.bind(this));\n    }\n\n    /**\n     * Detaches the tooltip from the editor.\n     */\n    detach() {\n        this.tooltip.hide();\n        this.moreOptions.hide();\n        this.$updateOnHoverHandlers(false);\n        if (this.editor) {\n            this.editor.off(\"changeSession\", this.$onEditorChangeSession);\n            if (this.editor.session) {\n                this.editor.session.off(\"changeScrollLeft\", this.$onChangeScroll);\n                this.editor.session.off(\"changeScrollTop\", this.$onChangeScroll);\n            }\n        }\n        this.$mouseInTooltip = false;\n        this.editor = null;\n    }\n\n    destroy() {\n        if (this.tooltip && this.moreOptions) {\n            this.detach();\n            this.tooltip.destroy();\n            this.moreOptions.destroy();\n        }\n        this.eventListeners = {};\n        this.commands = {};\n        this.elements = {};\n        this.tooltip = this.moreOptions = this.parentNode = null;\n    }\n\n    /**\n     * @param {string} id\n     * @param {TooltipCommand} command\n     * @param {boolean} forMainTooltip\n     */\n    $createCommand(id, command, forMainTooltip) {\n        var parentEl = forMainTooltip ? this.tooltipEl : this.moreOptionsEl;\n        var keyParts = [];\n        var bindKey = command.bindKey;\n        if (bindKey) {\n            if (typeof bindKey === 'object') {\n                bindKey = useragent.isMac ? bindKey.mac : bindKey.win;\n            }\n            bindKey = bindKey.split(\"|\")[0];\n            keyParts = bindKey.split(\"-\");\n            \n            keyParts = keyParts.map(function(key) {\n                if (keyDisplayMap[key]) {\n                    if (typeof keyDisplayMap[key] === 'string') {\n                        return keyDisplayMap[key];\n                    } else if (useragent.isMac && keyDisplayMap[key].mac) {\n                        return keyDisplayMap[key].mac;\n                    }\n                }\n                return key;\n            });\n        }\n\n        /**@type {any[]} */\n        var buttonNode;\n        if (forMainTooltip && command.iconCssClass) {\n            //Only support icon button for main tooltip, otherwise fall back to text button\n            buttonNode = [\n                'div',\n                {\n                     class: [\"ace_icon_svg\", command.iconCssClass].join(\" \"),\n                     \"aria-label\": command.name + \" (\" + command.bindKey + \")\"\n                }\n            ];\n        } else {\n            buttonNode = [\n                ['div', { class: VALUE_CLASS_NAME }],\n                ['div', { class: CAPTION_CLASS_NAME }, command.name]\n            ];\n            if (keyParts.length) {\n                buttonNode.push(\n                    [\n                        'div',\n                        { class: KEYBINDING_CLASS_NAME },\n                        keyParts.map(function(keyPart) {\n                            return ['div', keyPart];\n                        }) \n                    ]\n                );\n            }\n        }\n\n        // @ts-ignore\n        dom.buildDom(['div', { class: [BUTTON_CLASS_NAME, command.cssClass || \"\"].join(\" \"), ref: id }, buttonNode], parentEl, this.elements);\n        this.commands[id] = command;\n        \n        var eventListener =\n            /**\n             * @this {CommandBarTooltip}\n             */\n            function(e) {\n            if (this.editor) {\n                this.editor.focus();\n            }\n            // Internal variable to properly handle when the more options button is clicked\n            this.$shouldHideMoreOptions = this.isMoreOptionsShown();\n            if (!this.elements[id].disabled && command.exec) {\n                command.exec(this.editor);\n            }\n            if (this.$shouldHideMoreOptions) {\n                this.$setMoreOptionsVisibility(false);\n            }\n            this.update();\n            e.preventDefault();\n        }.bind(this);\n        this.eventListeners[id] = eventListener;\n        this.elements[id].addEventListener('click', eventListener.bind(this));\n        this.$updateElement(id);\n    }\n\n    /**\n     * @param {boolean} visible\n     */\n    $setMoreOptionsVisibility(visible) {\n        if (visible) {\n            this.moreOptions.setTheme(this.editor.renderer.theme);\n            this.moreOptions.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n            this.moreOptions.show();\n            this.update();\n            this.updatePosition();\n        } else {\n            this.moreOptions.hide();\n        }\n    }\n\n    $onEditorChangeSession(e) {\n        if (e.oldSession) {\n            e.oldSession.off(\"changeScrollTop\", this.$onChangeScroll);\n            e.oldSession.off(\"changeScrollLeft\", this.$onChangeScroll);\n        }\n        this.detach();\n    }\n\n    $onChangeScroll() {\n        if (this.editor.renderer && (this.isShown() || this.getAlwaysShow())) {\n            this.editor.renderer.once(\"afterRender\", this.updatePosition.bind(this));\n        }\n    }\n\n    $onMouseMove(e) {\n        if (this.$mouseInTooltip) {\n            return;\n        }\n        var cursorPosition = this.editor.getCursorPosition();\n        var cursorScreenPosition = this.editor.renderer.textToScreenCoordinates(cursorPosition.row, cursorPosition.column);\n        var lineHeight = this.editor.renderer.lineHeight;\n        \n        var isInCurrentLine = e.clientY >= cursorScreenPosition.pageY && e.clientY < cursorScreenPosition.pageY + lineHeight;\n\n        if (isInCurrentLine) {\n            if (!this.isShown() && !this.$showTooltipTimer.isPending()) {\n                this.$showTooltipTimer.delay();\n            }\n            if (this.$hideTooltipTimer.isPending()) {\n                this.$hideTooltipTimer.cancel();\n            }\n        } else {\n            if (this.isShown() && !this.$hideTooltipTimer.isPending()) {\n                this.$hideTooltipTimer.delay();\n            }\n            if (this.$showTooltipTimer.isPending()) {\n                this.$showTooltipTimer.cancel();\n            }\n        }\n    }\n\n    $preventMouseEvent(e) {\n        if (this.editor) {\n            this.editor.focus();\n        }\n        e.preventDefault();\n    }\n    \n    $scheduleTooltipForHide() {\n        this.$mouseInTooltip = false;\n        this.$showTooltipTimer.cancel();\n        this.$hideTooltipTimer.delay();\n    }\n\n    $tooltipEnter() {\n        this.$mouseInTooltip = true;\n        if (this.$showTooltipTimer.isPending()) {\n            this.$showTooltipTimer.cancel();\n        }\n        if (this.$hideTooltipTimer.isPending()) {\n            this.$hideTooltipTimer.cancel();\n        }\n    }\n\n    /**\n     * @param {boolean} [enableHover]\n     */\n    $updateOnHoverHandlers(enableHover) {\n        var tooltipEl = this.tooltip.getElement();\n        var moreOptionsEl = this.moreOptions.getElement();\n        if (enableHover) {\n            if (this.editor) {\n                this.editor.on(\"mousemove\", this.$onMouseMove);\n                this.editor.renderer.getMouseEventTarget().addEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n            }\n            tooltipEl.addEventListener('mouseenter', this.$tooltipEnter);\n            tooltipEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n            moreOptionsEl.addEventListener('mouseenter', this.$tooltipEnter);\n            moreOptionsEl.addEventListener('mouseleave', this.$scheduleTooltipForHide);\n        } else {\n            if (this.editor) {\n                this.editor.off(\"mousemove\", this.$onMouseMove);\n                this.editor.renderer.getMouseEventTarget().removeEventListener(\"mouseout\", this.$scheduleTooltipForHide, true);\n            }\n            tooltipEl.removeEventListener('mouseenter', this.$tooltipEnter);\n            tooltipEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n            moreOptionsEl.removeEventListener('mouseenter', this.$tooltipEnter);\n            moreOptionsEl.removeEventListener('mouseleave', this.$scheduleTooltipForHide);\n        }\n    }\n\n    $showTooltip() {\n        if (this.isShown()) {\n            return;\n        }\n        this.tooltip.setTheme(this.editor.renderer.theme);\n        this.tooltip.setClassName(TOOLTIP_CLASS_NAME + \"_wrapper\");\n        this.tooltip.show();\n        this.update();\n        this.updatePosition();\n        this._signal(\"show\");\n    }\n    $hideTooltip() {\n        this.$mouseInTooltip = false;\n        if (!this.isShown()) {\n            return;\n        }\n        this.moreOptions.hide();\n        this.tooltip.hide();\n        this._signal(\"hide\");\n    }\n\n    /**\n     * @param {string} id\n     */\n    $updateElement(id) {\n        var command = this.commands[id];\n        if (!command) {\n            return;\n        }\n        var el = this.elements[id];\n        var commandEnabled = command.enabled;\n        \n        if (typeof commandEnabled === 'function') {\n            commandEnabled = commandEnabled(this.editor);\n        }\n\n        if (typeof command.getValue === 'function') {\n            var value = command.getValue(this.editor);\n            if (command.type === 'text') {\n                el.textContent = value;\n            } else if (command.type === 'checkbox') {\n                var domCssFn = value ? dom.addCssClass : dom.removeCssClass;\n                var isOnTooltip = el.parentElement === this.tooltipEl;\n                el.ariaChecked = value;\n                if (isOnTooltip) {\n                    domCssFn(el, \"ace_selected\");\n                } else {\n                    el = el.querySelector(\".\" + VALUE_CLASS_NAME);\n                    domCssFn(el, \"ace_checkmark\");\n                }\n            }\n        }\n\n        if (commandEnabled && el.disabled) {\n            dom.removeCssClass(el, \"ace_disabled\");\n            el.ariaDisabled = el.disabled = false;\n            el.removeAttribute(\"disabled\");\n        } else if (!commandEnabled && !el.disabled) {\n            dom.addCssClass(el, \"ace_disabled\");\n            el.ariaDisabled = el.disabled = true;\n            el.setAttribute(\"disabled\", \"\");\n        }\n    }\n}\n\noop.implement(CommandBarTooltip.prototype, EventEmitter);\n\ndom.importCssString(`\n.ace_tooltip.${TOOLTIP_CLASS_NAME}_wrapper {\n    padding: 0;\n}\n\n.ace_tooltip .${TOOLTIP_CLASS_NAME} {\n    padding: 1px 5px;\n    display: flex;\n    pointer-events: auto;\n}\n\n.ace_tooltip .${TOOLTIP_CLASS_NAME}.tooltip_more_options {\n    padding: 1px;\n    flex-direction: column;\n}\n\ndiv.${BUTTON_CLASS_NAME} {\n    display: inline-flex;\n    cursor: pointer;\n    margin: 1px;\n    border-radius: 2px;\n    padding: 2px 5px;\n    align-items: center;\n}\n\ndiv.${BUTTON_CLASS_NAME}.ace_selected,\ndiv.${BUTTON_CLASS_NAME}:hover:not(.ace_disabled) {\n    background-color: rgba(0, 0, 0, 0.1);\n}\n\ndiv.${BUTTON_CLASS_NAME}.ace_disabled {\n    color: #777;\n    pointer-events: none;\n}\n\ndiv.${BUTTON_CLASS_NAME} .ace_icon_svg {\n    height: 12px;\n    background-color: #000;\n}\n\ndiv.${BUTTON_CLASS_NAME}.ace_disabled .ace_icon_svg {\n    background-color: #777;\n}\n\n.${TOOLTIP_CLASS_NAME}.tooltip_more_options .${BUTTON_CLASS_NAME} {\n    display: flex;\n}\n\n.${TOOLTIP_CLASS_NAME}.${VALUE_CLASS_NAME} {\n    display: none;\n}\n\n.${TOOLTIP_CLASS_NAME}.tooltip_more_options .${VALUE_CLASS_NAME} {\n    display: inline-block;\n    width: 12px;\n}\n\n.${CAPTION_CLASS_NAME} {\n    display: inline-block;\n}\n\n.${KEYBINDING_CLASS_NAME} {\n    margin: 0 2px;\n    display: inline-block;\n    font-size: 8px;\n}\n\n.${TOOLTIP_CLASS_NAME}.tooltip_more_options .${KEYBINDING_CLASS_NAME} {\n    margin-left: auto;\n}\n\n.${KEYBINDING_CLASS_NAME} div {\n    display: inline-block;\n    min-width: 8px;\n    padding: 2px;\n    margin: 0 1px;\n    border-radius: 2px;\n    background-color: #ccc;\n    text-align: center;\n}\n\n.ace_dark.ace_tooltip .${TOOLTIP_CLASS_NAME} {\n    background-color: #373737;\n    color: #eee;\n}\n\n.ace_dark div.${BUTTON_CLASS_NAME}.ace_disabled {\n    color: #979797;\n}\n\n.ace_dark div.${BUTTON_CLASS_NAME}.ace_selected,\n.ace_dark div.${BUTTON_CLASS_NAME}:hover:not(.ace_disabled) {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.ace_dark div.${BUTTON_CLASS_NAME} .ace_icon_svg {\n    background-color: #eee;\n}\n\n.ace_dark div.${BUTTON_CLASS_NAME}.ace_disabled .ace_icon_svg {\n    background-color: #979797;\n}\n\n.ace_dark .${BUTTON_CLASS_NAME}.ace_disabled {\n    color: #979797;\n}\n\n.ace_dark .${KEYBINDING_CLASS_NAME} div {\n    background-color: #575757;\n}\n\n.ace_checkmark::before {\n    content: '✓';\n}\n`, \"commandbar.css\", false);\n\nexports.CommandBarTooltip = CommandBarTooltip;\nexports.TOOLTIP_CLASS_NAME = TOOLTIP_CLASS_NAME;\nexports.BUTTON_CLASS_NAME = BUTTON_CLASS_NAME;\n"],"names":[],"sourceRoot":""}