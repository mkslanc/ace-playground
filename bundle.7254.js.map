{"version":3,"file":"bundle.7254.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCa;;AAEb,kBAAkB,iDAAsC;AACxD,gBAAgB,0CAA6B;AAC7C,iBAAiB,mBAAO,CAAC,KAAc;AACvC,aAAa,mBAAO,CAAC,KAAW;AAChC,UAAU,mBAAO,CAAC,KAAY;AAC9B,iBAAiB,uCAAiC;;AAElD;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,wCAAwC,QAAQ,2BAA2B,KAAK;AAChF;AACA,KAAK;AACL,uCAAuC,QAAQ;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA,UAAU,IAAI;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,0BAA0B;AAClD,sBAAsB,IAAI;AAC1B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,SAAS;AACpB;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C,mCAAmC,OAAO;AAC1C,sCAAsC,OAAO;AAC7C;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,oDAAoD;AAC/D,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB","sources":["webpack://ace-playground/./node_modules/ace-code/src/ext/static-css.js","webpack://ace-playground/./node_modules/ace-code/src/ext/static_highlight.js"],"sourcesContent":["module.exports = `.ace_static_highlight {\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'Source Code Pro', 'source-code-pro', 'Droid Sans Mono', monospace;\n    font-size: 12px;\n    white-space: pre-wrap\n}\n\n.ace_static_highlight .ace_gutter {\n    width: 2em;\n    text-align: right;\n    padding: 0 3px 0 0;\n    margin-right: 3px;\n    contain: none;\n}\n\n.ace_static_highlight.ace_show_gutter .ace_line {\n    padding-left: 2.6em;\n}\n\n.ace_static_highlight .ace_line { position: relative; }\n\n.ace_static_highlight .ace_gutter-cell {\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n}\n\n\n.ace_static_highlight .ace_gutter-cell:before {\n    content: counter(ace_line, decimal);\n    counter-increment: ace_line;\n}\n.ace_static_highlight {\n    counter-reset: ace_line;\n}\n`;\n","\"use strict\";\n\nvar EditSession = require(\"../edit_session\").EditSession;\nvar TextLayer = require(\"../layer/text\").Text;\nvar baseStyles = require(\"./static-css\");\nvar config = require(\"../config\");\nvar dom = require(\"../lib/dom\");\nvar escapeHTML = require(\"../lib/lang\").escapeHTML;\n\nclass Element {\n    /**\n     * @param {string} type\n     */\n    constructor(type) {\n        /** @type{string} */this.className;\n        this.type = type;\n        this.style = {};\n        this.textContent = \"\";\n    }\n\n    cloneNode() {\n        return this;\n    }\n\n    appendChild(child) {\n        this.textContent += child.toString();\n    }\n\n    toString() {\n        var stringBuilder = [];\n        if (this.type != \"fragment\") {\n            stringBuilder.push(\"<\", this.type);\n            if (this.className)\n                stringBuilder.push(\" class='\", this.className, \"'\");\n            var styleStr = [];\n            for (var key in this.style) {\n                styleStr.push(key, \":\", this.style[key]);\n            }\n            if (styleStr.length)\n                stringBuilder.push(\" style='\", styleStr.join(\"\"), \"'\");\n            stringBuilder.push(\">\");\n        }\n\n        if (this.textContent) {\n            stringBuilder.push(this.textContent);\n        }\n\n        if (this.type != \"fragment\") {\n            stringBuilder.push(\"</\", this.type, \">\");\n        }\n\n        return stringBuilder.join(\"\");\n    }\n}\n\n\nvar simpleDom = {\n    createTextNode: function(/** @type {string} */ textContent, /** @type {any} */ element) {\n        return escapeHTML(textContent);\n    },\n    createElement: function(/** @type {string} */ type) {\n        return new Element(type);\n    },\n    createFragment: function() {\n        return new Element(\"fragment\");\n    }\n};\n\n\n/**@type {any}*/\nvar SimpleTextLayer = function() {\n    this.config = {};\n    this.dom = simpleDom;\n};\nSimpleTextLayer.prototype = TextLayer.prototype;\n\n/**\n * \n * @param {HTMLElement} el\n * @param opts\n * @param [callback]\n * @returns {boolean}\n */\nvar highlight = function(el, opts, callback) {\n    var m = el.className.match(/lang-(\\w+)/);\n    var mode = opts.mode || m && (\"ace/mode/\" + m[1]);\n    if (!mode)\n        return false;\n    var theme = opts.theme || \"ace/theme/textmate\";\n    \n    var data = \"\";\n    var nodes = [];\n\n    if (el.firstElementChild) {\n        var textLen = 0;\n        for (var i = 0; i < el.childNodes.length; i++) {\n            /**@type {any}*/\n            var ch = el.childNodes[i];\n            if (ch.nodeType == 3) {\n                textLen += ch.data.length;\n                data += ch.data;\n            } else {\n                nodes.push(textLen, ch);\n            }\n        }\n    } else {\n        data = el.textContent;\n        if (opts.trim)\n            data = data.trim();\n    }\n    \n    highlight.render(data, mode, theme, opts.firstLineNumber, !opts.showGutter, function (highlighted) {\n        dom.importCssString(highlighted.css, \"ace_highlight\", true);\n        el.innerHTML = highlighted.html;\n        /** \n         * TODO: check if child exists\n         * @type {any} \n         */\n        var container = el.firstChild.firstChild;\n        for (var i = 0; i < nodes.length; i += 2) {\n            var pos = highlighted.session.doc.indexToPosition(nodes[i]);\n            var node = nodes[i + 1];\n            var lineEl = container.children[pos.row];\n            lineEl && lineEl.appendChild(node);\n        }\n        callback && callback();\n    });\n};\n\n/**\n * Transforms a given input code snippet into HTML using the given mode\n *\n * @param {string} input Code snippet\n * @param {string|import(\"../../ace-internal\").Ace.SyntaxMode} mode String specifying the mode to load such as\n *  `ace/mode/javascript` or, a mode loaded from `/ace/mode`\n *  (use 'ServerSideHiglighter.getMode').\n * @param {string} theme String specifying the theme to load such as\n *  `ace/theme/twilight` or, a theme loaded from `/ace/theme`.\n * @param {number} lineStart A number indicating the first line number. Defaults\n *  to 1.\n * @param {boolean} disableGutter Specifies whether or not to disable the gutter.\n *  `true` disables the gutter, `false` enables the gutter. Defaults to `false`.\n * @param {function} [callback] When specifying the mode or theme as a string,\n *  this method has no return value and you must specify a callback function. The\n *  callback will receive the rendered object containing the properties `html`\n *  and `css`.\n * @returns {object} An object containing the properties `html` and `css`.\n */\nhighlight.render = function(input, mode, theme, lineStart, disableGutter, callback) {\n    var waiting = 1;\n    var modeCache = EditSession.prototype.$modes;\n\n    // if either the theme or the mode were specified as objects\n    // then we need to lazily load them.\n    if (typeof theme == \"string\") {\n        waiting++;\n        config.loadModule(['theme', theme], function(m) {\n            theme = m;\n            --waiting || done();\n        });\n    }\n    // allow setting mode options e.h {path: \"ace/mode/php\", inline:true}\n    var modeOptions;\n    if (mode && typeof mode === \"object\" && !mode.getTokenizer) {\n        modeOptions = mode;\n        mode = modeOptions.path;\n    }\n    if (typeof mode == \"string\") {\n        waiting++;\n        config.loadModule(['mode', mode], function(m) {\n            if (!modeCache[/**@type{string}*/(mode)] || modeOptions)\n                modeCache[/**@type{string}*/(mode)] = new m.Mode(modeOptions);\n            mode = modeCache[/**@type{string}*/(mode)];\n            --waiting || done();\n        });\n    }\n\n    // loads or passes the specified mode module then calls renderer\n    function done() {\n        var result = highlight.renderSync(input, mode, theme, lineStart, disableGutter);\n        return callback ? callback(result) : result;\n    }\n    return --waiting || done();\n};\n\n/**\n * Transforms a given input code snippet into HTML using the given mode\n * @param {string} input Code snippet\n * @param {import(\"../../ace-internal\").Ace.SyntaxMode|string} mode Mode loaded from /ace/mode (use 'ServerSideHiglighter.getMode')\n * @param {any} theme\n * @param {any} lineStart\n * @param {boolean} disableGutter\n * @returns {object} An object containing: html, css\n */\nhighlight.renderSync = function(input, mode, theme, lineStart, disableGutter) {\n    lineStart = parseInt(lineStart || 1, 10);\n\n    var session = new EditSession(\"\");\n    session.setUseWorker(false);\n    session.setMode(mode);\n\n    /**@type {TextLayer}*/\n    var textLayer = new SimpleTextLayer();\n    textLayer.setSession(session);\n    Object.keys(textLayer.$tabStrings).forEach(function(k) {\n        if (typeof textLayer.$tabStrings[k] == \"string\") {\n            var el = simpleDom.createFragment();\n            el.textContent = textLayer.$tabStrings[k];\n            textLayer.$tabStrings[k] = el;\n        }\n    });\n\n    session.setValue(input);\n    var length =  session.getLength();\n    \n    var outerEl = simpleDom.createElement(\"div\");\n    outerEl.className = theme.cssClass;\n    \n    var innerEl = simpleDom.createElement(\"div\");\n    innerEl.className = \"ace_static_highlight\" + (disableGutter ? \"\" : \" ace_show_gutter\");\n    innerEl.style[\"counter-reset\"] = \"ace_line \" + (lineStart - 1);\n\n    for (var ix = 0; ix < length; ix++) {\n        var lineEl = simpleDom.createElement(\"div\");\n        lineEl.className = \"ace_line\";\n        \n        if (!disableGutter) {\n            var gutterEl = simpleDom.createElement(\"span\");\n            gutterEl.className =\"ace_gutter ace_gutter-cell\";\n            gutterEl.textContent = \"\"; /*(ix + lineStart) + */\n            lineEl.appendChild(gutterEl);\n        }\n        textLayer.$renderLine(lineEl, ix, false);\n        lineEl.textContent += \"\\n\";\n        innerEl.appendChild(lineEl);\n    }\n\n    //console.log(JSON.stringify(outerEl, null, 2));\n    //console.log(outerEl.toString());\n    outerEl.appendChild(innerEl);\n\n    return {\n        css: baseStyles + theme.cssText,\n        html: outerEl.toString(),\n        session: session\n    };\n};\n\nmodule.exports = highlight;\nmodule.exports.highlight = highlight;\n"],"names":[],"sourceRoot":""}