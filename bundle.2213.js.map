{"version":3,"file":"bundle.2213.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,YAAY,2CAA4B;AACxC,mBAAmB,qCAA+B;;AAElD,eAAe,SAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,UAAU;AAC7C,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AC9JY;;AAEb,YAAY,2CAAyB;;AAErC;;AAEA;;AAEA;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA,uCAAuC;;AAEvC;;AAEA;AACA,oDAAoD,yBAAyB;;AAE7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;;AAED,4BAA4B;;;;;;;;ACpCf;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,2BAA2B,0DAAwD;AACnF,2BAA2B,iDAAwD;AACnF,qBAAqB,8CAAoC;;AAEzD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,YAAY;;;;;;;;AChCZ;AACA;AACA;AACA;AACA;;AAEa;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;AAE7E;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB;AACtB;AACA;AACA,0BAA0B;AAC1B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,gCAAgC;AAChC;;;AAGA;;AAEA,SAA4B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://ace-playground/./node_modules/ace-code/src/mode/matching_brace_outdent.js","webpack://ace-playground/./node_modules/ace-code/src/mode/smithy.js","webpack://ace-playground/./node_modules/ace-code/src/mode/smithy_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SmithyHighlightRules = require(\"./smithy_highlight_rules\").SmithyHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SmithyHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.$quotes = {'\"': '\"'};\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    \n    this.$id = \"ace/mode/smithy\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/* This file was autogenerated from https://raw.githubusercontent.com/awslabs/smithy-vscode/master/syntaxes/smithy.tmLanguage (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SmithyHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        start: [{\n            include: \"#comment\"\n        }, {\n            token: [\n                \"meta.keyword.statement.smithy\",\n                \"variable.other.smithy\",\n                \"text\",\n                \"keyword.operator.smithy\"\n            ],\n            regex: /^(\\$)(\\s+.+)(\\s*)(=)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.namespace.smithy\"\n            ],\n            regex: /^(namespace)(\\s+)([A-Z-a-z0-9_\\.#$-]+)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\"\n            ],\n            regex: /^(use)(\\s+)(shape|trait)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"variable.other.smithy\",\n                \"text\",\n                \"keyword.operator.smithy\"\n            ],\n            regex: /^(metadata)(\\s+.+)(\\s*)(=)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\"\n            ],\n            regex: /^(apply|byte|short|integer|long|float|double|bigInteger|bigDecimal|boolean|blob|string|timestamp|service|resource|trait|list|map|set|structure|union|document)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n        }, {\n            token: [\n                \"keyword.operator.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\",\n                \"text\",\n                \"text\",\n                \"support.function.smithy\",\n                \"text\",\n                \"text\",\n                \"support.function.smithy\"\n            ],\n            regex: /^(operation)(\\s+)([A-Z-a-z0-9_\\.#$-]+)(\\(.*\\))(?:(\\s*)(->)(\\s*[A-Z-a-z0-9_\\.#$-]+))?(?:(\\s+)(errors))?/\n        }, {\n            include: \"#trait\"\n        }, {\n            token: [\n                \"support.type.property-name.smithy\",\n                \"punctuation.separator.dictionary.pair.smithy\"\n            ],\n            regex: /([A-Z-a-z0-9_\\.#$-]+)(:)/\n        }, {\n            include: \"#value\"\n        }, {\n            token: \"keyword.other.smithy\",\n            regex: /\\->/\n        }],\n        \"#comment\": [{\n            include: \"#doc_comment\"\n        }, {\n            include: \"#line_comment\"\n        }],\n        \"#doc_comment\": [{\n            token: \"comment.block.documentation.smithy\",\n            regex: /\\/\\/\\/.*/\n        }],\n        \"#line_comment\": [{\n            token: \"comment.line.double-slash.smithy\",\n            regex: /\\/\\/.*/\n        }],\n        \"#trait\": [{\n            token: [\n                \"punctuation.definition.annotation.smithy\",\n                \"storage.type.annotation.smithy\"\n            ],\n            regex: /(@)([0-9a-zA-Z\\.#-]+)/\n        }, {\n            token: [\n                \"punctuation.definition.annotation.smithy\",\n                \"punctuation.definition.object.end.smithy\",\n                \"meta.structure.smithy\"\n            ],\n            regex: /(@)([0-9a-zA-Z\\.#-]+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.object.end.smithy\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                include: \"#object_inner\"\n            }, {\n                defaultToken: \"meta.structure.smithy\"\n            }]\n        }],\n        \"#value\": [{\n            include: \"#constant\"\n        }, {\n            include: \"#number\"\n        }, {\n            include: \"#string\"\n        }, {\n            include: \"#array\"\n        }, {\n            include: \"#object\"\n        }],\n        \"#array\": [{\n            token: \"punctuation.definition.array.begin.smithy\",\n            regex: /\\[/,\n            push: [{\n                token: \"punctuation.definition.array.end.smithy\",\n                regex: /\\]/,\n                next: \"pop\"\n            }, {\n                include: \"#comment\"\n            }, {\n                include: \"#value\"\n            }, {\n                token: \"punctuation.separator.array.smithy\",\n                regex: /,/\n            }, {\n                token: \"invalid.illegal.expected-array-separator.smithy\",\n                regex: /[^\\s\\]]/\n            }, {\n                defaultToken: \"meta.structure.array.smithy\"\n            }]\n        }],\n        \"#constant\": [{\n            token: \"constant.language.smithy\",\n            regex: /\\b(?:true|false|null)\\b/\n        }],\n        \"#number\": [{\n            token: \"constant.numeric.smithy\",\n            regex: /-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/\n        }],\n        \"#object\": [{\n            token: \"punctuation.definition.dictionary.begin.smithy\",\n            regex: /\\{/,\n            push: [{\n                token: \"punctuation.definition.dictionary.end.smithy\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#trait\"\n            }, {\n                include: \"#object_inner\"\n            }, {\n                defaultToken: \"meta.structure.dictionary.smithy\"\n            }]\n        }],\n        \"#object_inner\": [{\n            include: \"#comment\"\n        }, {\n            include: \"#string_key\"\n        }, {\n            token: \"punctuation.separator.dictionary.key-value.smithy\",\n            regex: /:/,\n            push: [{\n                token: \"punctuation.separator.dictionary.pair.smithy\",\n                regex: /,|(?=\\})/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n                regex: /[^\\s,]/\n            }, {\n                defaultToken: \"meta.structure.dictionary.value.smithy\"\n            }]\n        }, {\n            token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n            regex: /[^\\s\\}]/\n        }],\n        \"#string_key\": [{\n            include: \"#identifier_key\"\n        }, {\n            include: \"#dquote_key\"\n        }, {\n            include: \"#squote_key\"\n        }],\n        \"#identifier_key\": [{\n            token: \"support.type.property-name.smithy\",\n            regex: /[A-Z-a-z0-9_\\.#$-]+/\n        }],\n        \"#dquote_key\": [{\n            include: \"#dquote\"\n        }],\n        \"#squote_key\": [{\n            include: \"#squote\"\n        }],\n        \"#string\": [{\n            include: \"#textblock\"\n        }, {\n            include: \"#dquote\"\n        }, {\n            include: \"#squote\"\n        }, {\n            include: \"#identifier\"\n        }],\n        \"#textblock\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.smithy\"\n            }]\n        }],\n        \"#dquote\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.smithy\"\n            }]\n        }],\n        \"#squote\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.smithy\"\n            }]\n        }],\n        \"#identifier\": [{\n            token: \"storage.type.smithy\",\n            regex: /[A-Z-a-z_][A-Z-a-z0-9_\\.#$-]*/\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nSmithyHighlightRules.metaData = {\n    name: \"Smithy\",\n    fileTypes: [\"smithy\"],\n    scopeName: \"source.smithy\",\n    foldingStartMarker: \"(\\\\{|\\\\[)\\\\s*\",\n    foldingStopMarker: \"\\\\s*(\\\\}|\\\\])\"\n};\n\n\noop.inherits(SmithyHighlightRules, TextHighlightRules);\n\nexports.SmithyHighlightRules = SmithyHighlightRules;\n"],"names":[],"sourceRoot":""}