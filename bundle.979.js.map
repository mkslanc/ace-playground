{"version":3,"file":"bundle.979.js","mappings":";;;;;;AAAA;AACA,IAAI,IAAyD;AAC7D;AACA,MAAM,aAKJ;AACF,CAAC;AACD,yBAAyB;AACzB;AACA;AACA,cAAc,8BAAmB;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B;AACA,gBAAgB,8BAAmB,wBAAwB,8BAAmB;AAC9E,oDAAoD,wCAAwC;AAC5F;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW,8BAAmB;AAC9B;AACA,kEAAkE,iBAAiB;AACnF;AACA,2DAA2D,aAAa;AACxE;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,8BAAmB;;AAEnB;AACA,8BAAmB;AACnB;AACA,CAAC;;AAED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,CAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,CAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,CAAW;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,CAAW;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,CAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,CAAW;AACzF;AACA;AACA;AACA;AACA;AACA,4EAA4E,CAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,CAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,CAAW;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,CAAW;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,CAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA,iBAAiB;AACjoBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,CAAC;AACD;;;;;;UC7WA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;;;;;;ACpCiE;AAEjE,IAAI,OAAO,GAAG,IAAI,6EAAc,CAAC,IAAI,CAAC,CAAC;AACvC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE;IAC5B,MAAM,EAAE,cAAM,+GAAwC,EAAxC,CAAwC;IACtD,SAAS,EAAE,aAAa;IACxB,KAAK,EAAE,MAAM;CAChB,CAAC,CAAC;AACH,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE;IAC3B,MAAM,EAAE,cAAM,+GAAuC,EAAvC,CAAuC;IACrD,SAAS,EAAE,YAAY;IACvB,KAAK,EAAE,KAAK;CACf,CAAC,CAAC;AACH,OAAO,CAAC,eAAe,CAAC,YAAY,EAAE;IAClC,MAAM,EAAE,cAAM,6GAA8C,EAA9C,CAA8C;IAC5D,SAAS,EAAE,mBAAmB;IAC9B,KAAK,EAAE,+BAA+B;CACzC,CAAC,CAAC","sources":["webpack://ace-playground/./node_modules/ace-linters/build/service-manager.js","webpack://ace-playground/webpack/bootstrap","webpack://ace-playground/webpack/runtime/compat get default export","webpack://ace-playground/webpack/runtime/create fake namespace object","webpack://ace-playground/webpack/runtime/define property getters","webpack://ace-playground/webpack/runtime/ensure chunk","webpack://ace-playground/webpack/runtime/get javascript chunk filename","webpack://ace-playground/webpack/runtime/global","webpack://ace-playground/webpack/runtime/hasOwnProperty shorthand","webpack://ace-playground/webpack/runtime/make namespace object","webpack://ace-playground/webpack/runtime/publicPath","webpack://ace-playground/webpack/runtime/importScripts chunk loading","webpack://ace-playground/./src/webworker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \t// The require scope\n/******/ \tvar __webpack_require__ = {};\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"ServiceManager\": () => (/* binding */ ServiceManager)\n});\n\n;// CONCATENATED MODULE: ./utils.ts\nfunction mergeObjects(obj1, obj2) {\r\n    if (!obj1)\r\n        return obj2;\r\n    if (!obj2)\r\n        return obj1;\r\n    const mergedObjects = {};\r\n    for (const key of [...Object.keys(obj1), ...Object.keys(obj2)]) {\r\n        if (obj1[key] && obj2[key]) {\r\n            if (Array.isArray(obj1[key])) {\r\n                mergedObjects[key] = obj1[key].concat(obj2[key]);\r\n            }\r\n            else {\r\n                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);\r\n            }\r\n        }\r\n        else {\r\n            mergedObjects[key] = obj1[key] ?? obj2[key];\r\n        }\r\n    }\r\n    return mergedObjects;\r\n}\r\n\n;// CONCATENATED MODULE: ./message-types.ts\nclass BaseMessage {\r\n    sessionId;\r\n    constructor(sessionId) {\r\n        this.sessionId = sessionId;\r\n    }\r\n}\r\nclass InitMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.init;\r\n    mode;\r\n    options;\r\n    value;\r\n    version;\r\n    constructor(sessionId, value, version, mode, options) {\r\n        super(sessionId);\r\n        this.version = version;\r\n        this.options = options;\r\n        this.mode = mode;\r\n        this.value = value;\r\n    }\r\n}\r\nclass FormatMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.format;\r\n    value;\r\n    format;\r\n    constructor(sessionId, value, format) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.format = format;\r\n    }\r\n}\r\nclass CompleteMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.complete;\r\n    value;\r\n    constructor(sessionId, value) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\nclass ResolveCompletionMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.resolveCompletion;\r\n    value;\r\n    constructor(sessionId, value) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\nclass HoverMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.hover;\r\n    value;\r\n    constructor(sessionId, value) {\r\n        super(sessionId);\r\n        this.value = value;\r\n    }\r\n}\r\nclass ValidateMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.validate;\r\n    constructor(sessionId) {\r\n        super(sessionId);\r\n    }\r\n}\r\nclass ChangeMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.change;\r\n    value;\r\n    version;\r\n    constructor(sessionId, value, version) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.version = version;\r\n    }\r\n}\r\nclass DeltasMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.applyDelta;\r\n    value;\r\n    version;\r\n    constructor(sessionId, value, version) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.version = version;\r\n    }\r\n}\r\nclass ChangeModeMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.changeMode;\r\n    mode;\r\n    value;\r\n    constructor(sessionId, value, mode) {\r\n        super(sessionId);\r\n        this.value = value;\r\n        this.mode = mode;\r\n    }\r\n}\r\nclass ChangeOptionsMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.changeOptions;\r\n    options;\r\n    merge;\r\n    constructor(sessionId, options, merge = false) {\r\n        super(sessionId);\r\n        this.options = options;\r\n        this.merge = merge;\r\n    }\r\n}\r\nclass DisposeMessage extends (/* unused pure expression or super */ null && (BaseMessage)) {\r\n    type = MessageType.dispose;\r\n    constructor(sessionId) {\r\n        super(sessionId);\r\n    }\r\n}\r\nclass GlobalOptionsMessage {\r\n    type = MessageType.globalOptions;\r\n    serviceName;\r\n    options;\r\n    merge;\r\n    constructor(serviceName, options, merge) {\r\n        this.serviceName = serviceName;\r\n        this.options = options;\r\n        this.merge = merge;\r\n    }\r\n}\r\nvar MessageType;\r\n(function (MessageType) {\r\n    MessageType[MessageType[\"init\"] = 0] = \"init\";\r\n    MessageType[MessageType[\"format\"] = 1] = \"format\";\r\n    MessageType[MessageType[\"complete\"] = 2] = \"complete\";\r\n    MessageType[MessageType[\"resolveCompletion\"] = 3] = \"resolveCompletion\";\r\n    MessageType[MessageType[\"change\"] = 4] = \"change\";\r\n    MessageType[MessageType[\"hover\"] = 5] = \"hover\";\r\n    MessageType[MessageType[\"validate\"] = 6] = \"validate\";\r\n    MessageType[MessageType[\"applyDelta\"] = 7] = \"applyDelta\";\r\n    MessageType[MessageType[\"changeMode\"] = 8] = \"changeMode\";\r\n    MessageType[MessageType[\"changeOptions\"] = 9] = \"changeOptions\";\r\n    MessageType[MessageType[\"dispose\"] = 10] = \"dispose\";\r\n    MessageType[MessageType[\"globalOptions\"] = 11] = \"globalOptions\";\r\n})(MessageType || (MessageType = {}));\r\n\n;// CONCATENATED MODULE: ./services/service-manager.ts\n\r\n\r\nclass ServiceManager {\r\n    $services = {};\r\n    $sessionIDToMode = {};\r\n    constructor(ctx) {\r\n        let doValidation = (document, serviceInstance) => {\r\n            serviceInstance ??= this.getServiceInstance(document.uri);\r\n            if (!serviceInstance)\r\n                return;\r\n            let postMessage = {\r\n                \"type\": MessageType.validate,\r\n            };\r\n            let sessionIDList = Object.keys(serviceInstance.documents);\r\n            for (let sessionID of sessionIDList) {\r\n                serviceInstance.doValidation({ uri: sessionID }).then((result) => {\r\n                    postMessage[\"sessionId\"] = sessionID;\r\n                    postMessage[\"value\"] = result;\r\n                    ctx.postMessage(postMessage);\r\n                });\r\n            }\r\n        };\r\n        ctx.addEventListener(\"message\", async (ev) => {\r\n            let message = ev.data;\r\n            let sessionID = message.sessionId;\r\n            let version = message.version;\r\n            let postMessage = {\r\n                \"type\": message.type,\r\n                \"sessionId\": sessionID,\r\n            };\r\n            let serviceInstance = this.getServiceInstance(sessionID);\r\n            let documentIdentifier = {\r\n                uri: sessionID,\r\n                version: version\r\n            };\r\n            switch (message[\"type\"]) {\r\n                case MessageType.format:\r\n                    postMessage[\"value\"] = serviceInstance?.format(documentIdentifier, message.value, message.format);\r\n                    break;\r\n                case MessageType.complete:\r\n                    postMessage[\"value\"] = await serviceInstance?.doComplete(documentIdentifier, message.value);\r\n                    break;\r\n                case MessageType.resolveCompletion:\r\n                    postMessage[\"value\"] = await serviceInstance?.doResolve(message.value);\r\n                    break;\r\n                case MessageType.change:\r\n                    serviceInstance?.setValue(documentIdentifier, message.value);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.applyDelta:\r\n                    serviceInstance?.applyDeltas(documentIdentifier, message.value);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.hover:\r\n                    postMessage[\"value\"] = await serviceInstance?.doHover(documentIdentifier, message.value);\r\n                    break;\r\n                case MessageType.validate:\r\n                    postMessage[\"value\"] = await serviceInstance?.doValidation(documentIdentifier);\r\n                    break;\r\n                case MessageType.init: //this should be first message\r\n                    await this.addDocument(documentIdentifier, message.value, message.mode, message.options);\r\n                    doValidation(documentIdentifier);\r\n                    break;\r\n                case MessageType.changeMode:\r\n                    await this.changeDocumentMode(documentIdentifier, message.value, message.mode, message.options);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.changeOptions:\r\n                    serviceInstance?.setOptions(sessionID, message.options);\r\n                    doValidation(documentIdentifier, serviceInstance);\r\n                    break;\r\n                case MessageType.dispose:\r\n                    this.removeDocument(documentIdentifier);\r\n                    break;\r\n                case MessageType.globalOptions:\r\n                    this.setGlobalOptions(message.serviceName, message.options, message.merge);\r\n                    break;\r\n            }\r\n            ctx.postMessage(postMessage);\r\n        });\r\n    }\r\n    static async $initServiceInstance(service) {\r\n        let module = await service.module();\r\n        service.serviceInstance = new module[service.className](service.modes);\r\n        service.serviceInstance.setGlobalOptions(service.options);\r\n    }\r\n    async $getServiceInstanceByMode(mode) {\r\n        let service = this.findServiceByMode(mode);\r\n        if (!service)\r\n            return;\r\n        if (!service.serviceInstance)\r\n            await ServiceManager.$initServiceInstance(service);\r\n        return service.serviceInstance;\r\n    }\r\n    setGlobalOptions(serviceName, options, merge = false) {\r\n        let service = this.$services[serviceName];\r\n        if (!service)\r\n            return;\r\n        service.options = merge ? mergeObjects(options, service.options) : options;\r\n        if (service.serviceInstance) {\r\n            service.serviceInstance.setGlobalOptions(service.options);\r\n        }\r\n    }\r\n    async addDocument(documentIdentifier, documentValue, mode, options) {\r\n        if (!mode || !/^ace\\/mode\\//.test(mode))\r\n            return;\r\n        mode = mode.replace(\"ace/mode/\", \"\");\r\n        let serviceInstance = await this.$getServiceInstanceByMode(mode);\r\n        if (!serviceInstance)\r\n            return;\r\n        let documentItem = {\r\n            uri: documentIdentifier.uri,\r\n            version: documentIdentifier.version,\r\n            languageId: mode,\r\n            text: documentValue\r\n        };\r\n        serviceInstance.addDocument(documentItem);\r\n        this.$sessionIDToMode[documentIdentifier.uri] = mode;\r\n    }\r\n    async changeDocumentMode(documentIdentifier, value, mode, options) {\r\n        this.removeDocument(documentIdentifier);\r\n        await this.addDocument(documentIdentifier, value, mode, options);\r\n    }\r\n    removeDocument(document) {\r\n        let service = this.getServiceInstance(document.uri);\r\n        if (service) {\r\n            service.removeDocument(document);\r\n            delete this.$sessionIDToMode[document.uri];\r\n        }\r\n    }\r\n    getServiceInstance(sessionID) {\r\n        let mode = this.$sessionIDToMode[sessionID];\r\n        let service = this.findServiceByMode(mode);\r\n        if (!mode || !service?.serviceInstance)\r\n            return; //TODO:\r\n        return service.serviceInstance;\r\n    }\r\n    findServiceByMode(mode) {\r\n        return Object.values(this.$services).find((el) => {\r\n            let extensions = el.modes.split('|');\r\n            if (extensions.includes(mode))\r\n                return el;\r\n        });\r\n    }\r\n    registerService(name, service) {\r\n        this.$services[name] = service;\r\n    }\r\n}\r\n\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=service-manager.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"bundle.\" + chunkId + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t979: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkace_playground\"] = self[\"webpackChunkace_playground\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","import {ServiceManager} from \"ace-linters/build/service-manager\";\n\nlet manager = new ServiceManager(self);\nmanager.registerService(\"html\", {\n    module: () => import(\"ace-linters/build/html-service\"),\n    className: \"HtmlService\",\n    modes: \"html\"\n});\nmanager.registerService(\"css\", {\n    module: () => import(\"ace-linters/build/css-service\"),\n    className: \"CssService\",\n    modes: \"css\"\n});\nmanager.registerService(\"typescript\", {\n    module: () => import(\"ace-linters/build/typescript-service\"),\n    className: \"TypescriptService\",\n    modes: \"typescript|javascript|tsx|jsx\",\n});\n"],"names":[],"sourceRoot":""}