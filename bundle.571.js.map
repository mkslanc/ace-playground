{"version":3,"file":"bundle.571.js","mappings":";;;;;;AAAa;;AAEb,UAAU,mBAAO,CAAC,IAAe;AACjC,mBAAmB,qCAA+B;;AAElD,eAAe,SAAgB;AAC/B,gDAAgD;AAChD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACxBY;AACb;AACA,UAAU,mBAAO,CAAC,IAAY;AAC9B,eAAe,iCAAsB;AACrC,0BAA0B,yDAAsD;AAChF,eAAe,6CAAsC;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED,YAAY;;;;;;;;ACpBC;;AAEb,UAAU,mBAAO,CAAC,IAAY;AAC9B,yBAAyB,wDAAoD;;AAE7E;AACA;AACA,aAAa,QAAQ,KAAK,SAAS,KAAK,SAAS,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,KAAK,MAAM,KAAK,0BAA0B,KAAK,OAAO,IAAI,OAAO,IAAI,OAAO,KAAK,WAAW,IAAI,eAAe,KAAK,wBAAwB,KAAK,iBAAiB,KAAK,kBAAkB,KAAK,wBAAwB,KAAK,0BAA0B,KAAK,2BAA2B,KAAK,gBAAgB,KAAK,kBAAkB,KAAK,yBAAyB,IAAI,oBAAoB,KAAK,kBAAkB,KAAK,mBAAmB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,eAAe,KAAK,iBAAiB,KAAK,cAAc,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,gBAAgB;AACrsB;;AAEA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,4BAA4B,GAAG,SAAS,GAAG;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,uBAAuB,GAAG,mDAAmD,GAAG;AAChF;AACA,SAAS;AACT;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAA2B","sources":["webpack://ace-playground/./node_modules/ace-code/src/mode/folding/pythonic.js","webpack://ace-playground/./node_modules/ace-code/src/mode/robot.js","webpack://ace-playground/./node_modules/ace-code/src/mode/robot_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n  \nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RobotHighlightRules = require(\"./robot_highlight_rules\").RobotHighlightRules;\nvar FoldMode = require(\"./folding/pythonic\").FoldMode;\n\nvar Mode = function() {\n  this.HighlightRules = RobotHighlightRules;\n  this.foldingRules = new FoldMode();\n  this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n  this.lineCommentStart = \"#\";\n  this.$id = \"ace/mode/robot\";\n  this.snippetFileId = \"ace/snippets/robot\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","'use strict';\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar RobotHighlightRules = function() {\n    var builtinConstantsRegex = new RegExp(\n        /\\$\\{CURDIR\\}|\\$\\{TEMPDIR\\}|\\$\\{EXECDIR\\}|\\$\\{\\/\\}|\\$\\{\\:\\}|\\$\\{\\\\n\\}|\\$\\{true\\}|\\$\\{false\\}|\\$\\{none\\}|\\$\\{null\\}|\\$\\{space(?:\\s*\\*\\s+[0-9]+)?\\}|\\$\\{empty\\}|&\\{empty\\}|@\\{empty\\}|\\$\\{TEST NAME\\}|@\\{TEST[\\s_]TAGS\\}|\\$\\{TEST[\\s_]DOCUMENTATION\\}|\\$\\{TEST[\\s_]STATUS\\}|\\$\\{TEST[\\s_]MESSAGE\\}|\\$\\{PREV[\\s_]TEST[\\s_]NAME\\}|\\$\\{PREV[\\s_]TEST[\\s_]STATUS\\}|\\$\\{PREV[\\s_]TEST[\\s_]MESSAGE\\}|\\$\\{SUITE[\\s_]NAME\\}|\\$\\{SUITE[\\s_]SOURCE\\}|\\$\\{SUITE[\\s_]DOCUMENTATION\\}|&\\{SUITE[\\s_]METADATA\\}|\\$\\{SUITE[\\s_]STATUS\\}|\\$\\{SUITE[\\s_]MESSAGE\\}|\\$\\{KEYWORD[\\s_]STATUS\\}|\\$\\{KEYWORD[\\s_]MESSAGE\\}|\\$\\{LOG[\\s_]LEVEL\\}|\\$\\{OUTPUT[\\s_]FILE\\}|\\$\\{LOG[\\s_]FILE\\}|\\$\\{REPORT[\\s_]FILE\\}|\\$\\{DEBUG[\\s_]FILE\\}|\\$\\{OUTPUT[\\s_]DIR\\}/\n    );\n\n    this.$rules = {\n        \"start\" : [ {\n            token: \"string.robot.header\",\n            regex: /^\\*{3}\\s+(?:settings?|metadata|(?:user )?keywords?|test ?cases?|tasks?|variables?)/,\n            caseInsensitive: true,\n            push: [{\n                token: \"string.robot.header\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.robot.header\"\n            }],\n            comment: \"start of a table\"\n        }, {\n            token: \"comment.robot\",\n            regex: /(?:^|\\s{2,}|\\t|\\|\\s{1,})(?=[^\\\\])#/,\n            push: [{\n                token: \"comment.robot\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.robot\"\n            }]\n        }, {\n            token: \"comment\",\n            regex: /^\\s*\\[?Documentation\\]?/,\n            caseInsensitive: true,\n            push: [{\n                token: \"comment\",\n                regex: /^(?!\\s*\\.\\.\\.)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment\"\n            }]\n        }, {\n            token: \"storage.type.method.robot\",\n            regex: /\\[(?:Arguments|Setup|Teardown|Precondition|Postcondition|Template|Return|Timeout)\\]/,\n            caseInsensitive: true,\n            comment: \"testcase settings\"\n        }, {\n            token: \"storage.type.method.robot\",\n            regex: /\\[Tags\\]/,\n            caseInsensitive: true,\n            push: [{\n                token: \"storage.type.method.robot\",\n                regex: /^(?!\\s*\\.\\.\\.)/,\n                next: \"pop\"\n            }, {\n                token: \"comment\",\n                regex: /^\\s*\\.\\.\\./\n            }, {\n                defaultToken: \"storage.type.method.robot\"\n            }],\n            comment: \"test tags\"\n        }, {\n            token: \"constant.language\",\n            regex: builtinConstantsRegex,\n            caseInsensitive: true\n        }, {\n            token: \"entity.name.variable.wrapper\",\n            regex: /[$@&%]\\{\\{?/,\n            push: [{\n                token: \"entity.name.variable.wrapper\",\n                regex: /\\}\\}?(\\s?=)?/,\n                next: \"pop\"\n            }, {\n                include: \"$self\"\n            }, {\n                token: \"entity.name.variable\",\n                regex: /./\n            }, {\n                defaultToken: \"entity.name.variable\"\n            }]\n        }, {\n            token: \"keyword.control.robot\",\n            regex: /^[^\\s\\t*$|]+|(?=^\\|)\\s+[^\\s\\t*$|]+/,\n            push: [{\n                token: \"keyword.control.robot\",\n                regex: /(?=\\s{2})|\\t|$|\\s+(?=\\|)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"keyword.control.robot\"\n            }]\n        }, {\n            token: \"constant.numeric.robot\",\n            regex: /\\b[0-9]+(?:\\.[0-9]+)?\\b/\n        }, {\n            token: \"keyword\",\n            regex: /\\s{2,}(for|in range|in|end|else if|if|else|with name)(\\s{2,}|$)/,\n            caseInsensitive: true\n        }, {\n            token: \"storage.type.function\",\n            regex: /^(?:\\s{2,}\\s+)[^ \\t*$@&%[.|]+/,\n            push: [{\n                token: \"storage.type.function\",\n                regex: /(?=\\s{2})|\\t|$|\\s+(?=\\|)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"storage.type.function\"\n            }]\n        }]\n    };\n    this.normalizeRules();\n};\n\nRobotHighlightRules.metadata = {\n  fileTypes: ['robot'],\n  name: 'Robot',\n  scopeName: 'source.robot'\n};\n\noop.inherits(RobotHighlightRules, TextHighlightRules);\n\nexports.RobotHighlightRules = RobotHighlightRules;\n"],"names":[],"sourceRoot":""}