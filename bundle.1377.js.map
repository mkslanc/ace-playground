{"version":3,"file":"bundle.1377.js","mappings":";;;;;;AAAa;AACb;AACA,aAAa,uCAAuC;AACpD,aAAa,iDAAiD,2CAA2C,WAAW;AACpH;;AAEA,kBAAkB,iDAAsC;AACxD,YAAY,mBAAO,CAAC,KAAc;AAClC,WAAW,mBAAO,CAAC,KAAa;AAChC,UAAU,mBAAO,CAAC,KAAY;;AAE9B;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wCAAwC,sBAAsB;AAC9D;AACA;AACA;;AAEA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,WAAW,aAAa;AACxB;AACA,YAAY;AACZ;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL,iCAAiC,OAAO,QAAQ,gBAAgB;AAChE;AACA;;AAEA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB;AACA,aAAa;AACb;AACA;;AAEA,aAAa,mCAA2B;AACxC,0CAAkC;AAClC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ace-playground/./node_modules/ace-code/src/ext/code_lens.js"],"sourcesContent":["\"use strict\";\n/**\n * @typedef {import(\"../edit_session\").EditSession} EditSession\n * @typedef {import(\"../virtual_renderer\").VirtualRenderer & {$textLayer: import(\"../layer/text\").Text &{$lenses}}} VirtualRenderer\n */\n\nvar LineWidgets = require(\"../line_widgets\").LineWidgets;\nvar event = require(\"../lib/event\");\nvar lang = require(\"../lib/lang\");\nvar dom = require(\"../lib/dom\");\n\n/**\n * @param {VirtualRenderer} renderer\n */\nfunction clearLensElements(renderer) {\n    var textLayer = renderer.$textLayer;\n    var lensElements = textLayer.$lenses;\n    if (lensElements)\n        lensElements.forEach(function(el) {el.remove(); });\n    textLayer.$lenses = null;\n}\n\n/**\n * @param {number} changes\n * @param {VirtualRenderer} renderer\n */\nfunction renderWidgets(changes, renderer) {\n    var changed = changes & renderer.CHANGE_LINES\n        || changes & renderer.CHANGE_FULL\n        || changes & renderer.CHANGE_SCROLL\n        || changes & renderer.CHANGE_TEXT;\n    if (!changed)\n        return;\n\n    var session = renderer.session;\n    var lineWidgets = renderer.session.lineWidgets;\n    var textLayer = renderer.$textLayer;\n    var lensElements = textLayer.$lenses;\n    if (!lineWidgets) {\n        if (lensElements)\n            clearLensElements(renderer);\n        return;\n    }\n\n    var textCells = renderer.$textLayer.$lines.cells;\n    var config = renderer.layerConfig;\n    var padding = renderer.$padding;\n\n    if (!lensElements)\n        lensElements = textLayer.$lenses = [];\n\n\n    var index = 0;\n    for (var i = 0; i < textCells.length; i++) {\n        var row = textCells[i].row;\n        var widget = lineWidgets[row];\n        var lenses = widget && widget.lenses;\n\n        if (!lenses || !lenses.length) continue;\n\n        var lensContainer = lensElements[index];\n        if (!lensContainer) {\n            lensContainer = lensElements[index]\n                = dom.buildDom([\"div\", {class: \"ace_codeLens\"}], renderer.container);\n        }\n        lensContainer.style.height = config.lineHeight + \"px\";\n        index++;\n\n        for (var j = 0; j < lenses.length; j++) {\n            var el = lensContainer.childNodes[2 * j];\n            if (!el) {\n                if (j != 0) lensContainer.appendChild(dom.createTextNode(\"\\xa0|\\xa0\"));\n                el = dom.buildDom([\"a\"], lensContainer);\n            }\n            el.textContent = lenses[j].title;\n            el.lensCommand = lenses[j];\n        }\n        while (lensContainer.childNodes.length > 2 * j - 1)\n            lensContainer.lastChild.remove();\n\n        var top = renderer.$cursorLayer.getPixelPosition({\n            row: row,\n            column: 0\n        }, true).top - config.lineHeight * widget.rowsAbove - config.offset;\n        lensContainer.style.top = top + \"px\";\n\n        var left = renderer.gutterWidth;\n        var indent = session.getLine(row).search(/\\S|$/);\n        if (indent == -1)\n            indent = 0;\n        left += indent * config.characterWidth;\n        lensContainer.style.paddingLeft = padding + left + \"px\";\n    }\n    while (index < lensElements.length)\n        lensElements.pop().remove();\n}\n\n/**\n * @param {EditSession} session\n */\nfunction clearCodeLensWidgets(session) {\n    if (!session.lineWidgets) return;\n    var widgetManager = session.widgetManager;\n    session.lineWidgets.forEach(function(widget) {\n        if (widget && widget.lenses)\n            widgetManager.removeLineWidget(widget);\n    });\n}\n\n/**\n * \n * @param {EditSession} session\n * @param lenses\n * @return {number}\n */\nexports.setLenses = function(session, lenses) {\n    var firstRow = Number.MAX_VALUE;\n\n    clearCodeLensWidgets(session);\n    lenses && lenses.forEach(function(lens) {\n        var row = lens.start.row;\n        var column = lens.start.column;\n        var widget = session.lineWidgets && session.lineWidgets[row];\n        if (!widget || !widget.lenses) {\n            widget = session.widgetManager.$registerLineWidget({\n                rowCount: 1,\n                rowsAbove: 1,\n                row: row,\n                column: column,\n                lenses: []\n            });\n        }\n        widget.lenses.push(lens.command);\n        if (row < firstRow)\n            firstRow = row;\n    });\n    session._emit(\"changeFold\", {data: {start: {row: firstRow}}});\n    return firstRow;\n};\n\n/**\n * @param {import(\"../editor\").Editor} editor\n */\nfunction attachToEditor(editor) {\n    editor.codeLensProviders = [];\n    editor.renderer.on(\"afterRender\", renderWidgets);\n    if (!editor.$codeLensClickHandler) {\n        editor.$codeLensClickHandler = function(e) {\n            var command = e.target.lensCommand;\n            if (!command) return;\n            editor.execCommand(command.id, command.arguments);\n            editor._emit(\"codeLensClick\", e);\n        };\n        event.addListener(editor.container, \"click\", editor.$codeLensClickHandler, editor);\n    }\n    editor.$updateLenses = function() {\n        var session = editor.session;\n        if (!session) return;\n\n        if (!session.widgetManager) {\n            session.widgetManager = new LineWidgets(session);\n            session.widgetManager.attach(editor);\n        }\n\n        var providersToWaitNum = editor.codeLensProviders.length;\n        var lenses = [];\n        editor.codeLensProviders.forEach(function(provider) {\n            provider.provideCodeLenses(session, function(err, payload) {\n                if (err) return;\n                payload.forEach(function(lens) {\n                    lenses.push(lens);\n                });\n                providersToWaitNum--;\n                if (providersToWaitNum == 0) {\n                    applyLenses();\n                }\n            });\n        });\n\n        function applyLenses() {\n            var cursor = session.selection.cursor;\n            var oldRow = session.documentToScreenRow(cursor);\n            var scrollTop = session.getScrollTop();\n            var firstRow = exports.setLenses(session, lenses);\n\n            var lastDelta = session.$undoManager && session.$undoManager.$lastDelta;\n            if (lastDelta && lastDelta.action == \"remove\" && lastDelta.lines.length > 1)\n                return;\n            var row = session.documentToScreenRow(cursor);\n            var lineHeight = editor.renderer.layerConfig.lineHeight;\n            var top = session.getScrollTop() + (row - oldRow) * lineHeight;\n            // special case for the lens on line 0, because it can't be scrolled into view with keyboard \n            if (firstRow == 0 && scrollTop < lineHeight /4 && scrollTop > -lineHeight/4) {\n                top = -lineHeight;\n            }\n            session.setScrollTop(top);\n        }\n    };\n    var updateLenses = lang.delayedCall(editor.$updateLenses);\n    editor.$updateLensesOnInput = function() {\n        updateLenses.delay(250);\n    };\n    editor.on(\"input\", editor.$updateLensesOnInput);\n}\n\n/**\n * @param {import(\"../editor\").Editor} editor\n */\nfunction detachFromEditor(editor) {\n    editor.off(\"input\", editor.$updateLensesOnInput);\n    editor.renderer.off(\"afterRender\", renderWidgets);\n    if (editor.$codeLensClickHandler)\n        editor.container.removeEventListener(\"click\", editor.$codeLensClickHandler);\n}\n\n/**\n * @param {import(\"../editor\").Editor} editor\n * @param codeLensProvider\n */\nexports.registerCodeLensProvider = function(editor, codeLensProvider) {\n    editor.setOption(\"enableCodeLens\", true);\n    editor.codeLensProviders.push(codeLensProvider);\n    editor.$updateLensesOnInput();\n};\n\n/**\n * @param {EditSession} session\n */\nexports.clear = function(session) {\n    exports.setLenses(session, null);\n};\n\nvar Editor = require(\"../editor\").Editor;\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableCodeLens: {\n        set: function(val) {\n            if (val) {\n                attachToEditor(this);\n            } else {\n                detachFromEditor(this);\n            }\n        }\n    }\n});\n\ndom.importCssString(`\n.ace_codeLens {\n    position: absolute;\n    color: #aaa;\n    font-size: 88%;\n    background: inherit;\n    width: 100%;\n    display: flex;\n    align-items: flex-end;\n    pointer-events: none;\n}\n.ace_codeLens > a {\n    cursor: pointer;\n    pointer-events: auto;\n}\n.ace_codeLens > a:hover {\n    color: #0000ff;\n    text-decoration: underline;\n}\n.ace_dark > .ace_codeLens > a:hover {\n    color: #4e94ce;\n}\n`, \"codelense.css\", false);\n"],"names":[],"sourceRoot":""}